
QCMMainCtrl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000cc6  00000d5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  00800062  00800062  00000d5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001087  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000569  00000000  00000000  00001f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c1  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b2  00000000  00000000  00002d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cc3  00000000  00000000  000035d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004295  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fe c0       	rjmp	.+508    	; 0x1fe <__ctors_end>
   2:	32 c1       	rjmp	.+612    	; 0x268 <__vector_1>
   4:	17 c1       	rjmp	.+558    	; 0x234 <__bad_interrupt>
   6:	16 c1       	rjmp	.+556    	; 0x234 <__bad_interrupt>
   8:	15 c1       	rjmp	.+554    	; 0x234 <__bad_interrupt>
   a:	14 c1       	rjmp	.+552    	; 0x234 <__bad_interrupt>
   c:	13 c1       	rjmp	.+550    	; 0x234 <__bad_interrupt>
   e:	12 c1       	rjmp	.+548    	; 0x234 <__bad_interrupt>
  10:	11 c1       	rjmp	.+546    	; 0x234 <__bad_interrupt>
  12:	ca c4       	rjmp	.+2452   	; 0x9a8 <__vector_9>
  14:	0f c1       	rjmp	.+542    	; 0x234 <__bad_interrupt>
  16:	0e c1       	rjmp	.+540    	; 0x234 <__bad_interrupt>
  18:	0d c1       	rjmp	.+538    	; 0x234 <__bad_interrupt>
  1a:	0c c1       	rjmp	.+536    	; 0x234 <__bad_interrupt>
  1c:	0b c1       	rjmp	.+534    	; 0x234 <__bad_interrupt>
  1e:	0a c1       	rjmp	.+532    	; 0x234 <__bad_interrupt>
  20:	09 c1       	rjmp	.+530    	; 0x234 <__bad_interrupt>
  22:	f0 c2       	rjmp	.+1504   	; 0x604 <__vector_17>
  24:	07 c1       	rjmp	.+526    	; 0x234 <__bad_interrupt>
  26:	0d c3       	rjmp	.+1562   	; 0x642 <__vector_17+0x3e>
  28:	ae c4       	rjmp	.+2396   	; 0x986 <__vector_17+0x382>
  2a:	ad c4       	rjmp	.+2394   	; 0x986 <__vector_17+0x382>
  2c:	ac c4       	rjmp	.+2392   	; 0x986 <__vector_17+0x382>
  2e:	ab c4       	rjmp	.+2390   	; 0x986 <__vector_17+0x382>
  30:	aa c4       	rjmp	.+2388   	; 0x986 <__vector_17+0x382>
  32:	a9 c4       	rjmp	.+2386   	; 0x986 <__vector_17+0x382>
  34:	a8 c4       	rjmp	.+2384   	; 0x986 <__vector_17+0x382>
  36:	13 c3       	rjmp	.+1574   	; 0x65e <__vector_17+0x5a>
  38:	a6 c4       	rjmp	.+2380   	; 0x986 <__vector_17+0x382>
  3a:	a5 c4       	rjmp	.+2378   	; 0x986 <__vector_17+0x382>
  3c:	a4 c4       	rjmp	.+2376   	; 0x986 <__vector_17+0x382>
  3e:	a3 c4       	rjmp	.+2374   	; 0x986 <__vector_17+0x382>
  40:	a2 c4       	rjmp	.+2372   	; 0x986 <__vector_17+0x382>
  42:	a1 c4       	rjmp	.+2370   	; 0x986 <__vector_17+0x382>
  44:	a0 c4       	rjmp	.+2368   	; 0x986 <__vector_17+0x382>
  46:	1a c3       	rjmp	.+1588   	; 0x67c <__vector_17+0x78>
  48:	9e c4       	rjmp	.+2364   	; 0x986 <__vector_17+0x382>
  4a:	9d c4       	rjmp	.+2362   	; 0x986 <__vector_17+0x382>
  4c:	9c c4       	rjmp	.+2360   	; 0x986 <__vector_17+0x382>
  4e:	9b c4       	rjmp	.+2358   	; 0x986 <__vector_17+0x382>
  50:	9a c4       	rjmp	.+2356   	; 0x986 <__vector_17+0x382>
  52:	99 c4       	rjmp	.+2354   	; 0x986 <__vector_17+0x382>
  54:	98 c4       	rjmp	.+2352   	; 0x986 <__vector_17+0x382>
  56:	21 c3       	rjmp	.+1602   	; 0x69a <__vector_17+0x96>
  58:	96 c4       	rjmp	.+2348   	; 0x986 <__vector_17+0x382>
  5a:	95 c4       	rjmp	.+2346   	; 0x986 <__vector_17+0x382>
  5c:	94 c4       	rjmp	.+2344   	; 0x986 <__vector_17+0x382>
  5e:	93 c4       	rjmp	.+2342   	; 0x986 <__vector_17+0x382>
  60:	92 c4       	rjmp	.+2340   	; 0x986 <__vector_17+0x382>
  62:	91 c4       	rjmp	.+2338   	; 0x986 <__vector_17+0x382>
  64:	90 c4       	rjmp	.+2336   	; 0x986 <__vector_17+0x382>
  66:	3a c3       	rjmp	.+1652   	; 0x6dc <__vector_17+0xd8>
  68:	8e c4       	rjmp	.+2332   	; 0x986 <__vector_17+0x382>
  6a:	8d c4       	rjmp	.+2330   	; 0x986 <__vector_17+0x382>
  6c:	8c c4       	rjmp	.+2328   	; 0x986 <__vector_17+0x382>
  6e:	8b c4       	rjmp	.+2326   	; 0x986 <__vector_17+0x382>
  70:	8a c4       	rjmp	.+2324   	; 0x986 <__vector_17+0x382>
  72:	89 c4       	rjmp	.+2322   	; 0x986 <__vector_17+0x382>
  74:	88 c4       	rjmp	.+2320   	; 0x986 <__vector_17+0x382>
  76:	64 c3       	rjmp	.+1736   	; 0x740 <__vector_17+0x13c>
  78:	86 c4       	rjmp	.+2316   	; 0x986 <__vector_17+0x382>
  7a:	85 c4       	rjmp	.+2314   	; 0x986 <__vector_17+0x382>
  7c:	84 c4       	rjmp	.+2312   	; 0x986 <__vector_17+0x382>
  7e:	83 c4       	rjmp	.+2310   	; 0x986 <__vector_17+0x382>
  80:	82 c4       	rjmp	.+2308   	; 0x986 <__vector_17+0x382>
  82:	81 c4       	rjmp	.+2306   	; 0x986 <__vector_17+0x382>
  84:	80 c4       	rjmp	.+2304   	; 0x986 <__vector_17+0x382>
  86:	64 c3       	rjmp	.+1736   	; 0x750 <__vector_17+0x14c>
  88:	7e c4       	rjmp	.+2300   	; 0x986 <__vector_17+0x382>
  8a:	7d c4       	rjmp	.+2298   	; 0x986 <__vector_17+0x382>
  8c:	7c c4       	rjmp	.+2296   	; 0x986 <__vector_17+0x382>
  8e:	7b c4       	rjmp	.+2294   	; 0x986 <__vector_17+0x382>
  90:	7a c4       	rjmp	.+2292   	; 0x986 <__vector_17+0x382>
  92:	79 c4       	rjmp	.+2290   	; 0x986 <__vector_17+0x382>
  94:	78 c4       	rjmp	.+2288   	; 0x986 <__vector_17+0x382>
  96:	63 c3       	rjmp	.+1734   	; 0x75e <__vector_17+0x15a>
  98:	76 c4       	rjmp	.+2284   	; 0x986 <__vector_17+0x382>
  9a:	75 c4       	rjmp	.+2282   	; 0x986 <__vector_17+0x382>
  9c:	74 c4       	rjmp	.+2280   	; 0x986 <__vector_17+0x382>
  9e:	73 c4       	rjmp	.+2278   	; 0x986 <__vector_17+0x382>
  a0:	72 c4       	rjmp	.+2276   	; 0x986 <__vector_17+0x382>
  a2:	71 c4       	rjmp	.+2274   	; 0x986 <__vector_17+0x382>
  a4:	70 c4       	rjmp	.+2272   	; 0x986 <__vector_17+0x382>
  a6:	62 c3       	rjmp	.+1732   	; 0x76c <__vector_17+0x168>
  a8:	6e c4       	rjmp	.+2268   	; 0x986 <__vector_17+0x382>
  aa:	6d c4       	rjmp	.+2266   	; 0x986 <__vector_17+0x382>
  ac:	6c c4       	rjmp	.+2264   	; 0x986 <__vector_17+0x382>
  ae:	6b c4       	rjmp	.+2262   	; 0x986 <__vector_17+0x382>
  b0:	6a c4       	rjmp	.+2260   	; 0x986 <__vector_17+0x382>
  b2:	69 c4       	rjmp	.+2258   	; 0x986 <__vector_17+0x382>
  b4:	68 c4       	rjmp	.+2256   	; 0x986 <__vector_17+0x382>
  b6:	77 c3       	rjmp	.+1774   	; 0x7a6 <__vector_17+0x1a2>
  b8:	66 c4       	rjmp	.+2252   	; 0x986 <__vector_17+0x382>
  ba:	65 c4       	rjmp	.+2250   	; 0x986 <__vector_17+0x382>
  bc:	64 c4       	rjmp	.+2248   	; 0x986 <__vector_17+0x382>
  be:	63 c4       	rjmp	.+2246   	; 0x986 <__vector_17+0x382>
  c0:	62 c4       	rjmp	.+2244   	; 0x986 <__vector_17+0x382>
  c2:	61 c4       	rjmp	.+2242   	; 0x986 <__vector_17+0x382>
  c4:	60 c4       	rjmp	.+2240   	; 0x986 <__vector_17+0x382>
  c6:	a6 c3       	rjmp	.+1868   	; 0x814 <__vector_17+0x210>
  c8:	5e c4       	rjmp	.+2236   	; 0x986 <__vector_17+0x382>
  ca:	5d c4       	rjmp	.+2234   	; 0x986 <__vector_17+0x382>
  cc:	5c c4       	rjmp	.+2232   	; 0x986 <__vector_17+0x382>
  ce:	5b c4       	rjmp	.+2230   	; 0x986 <__vector_17+0x382>
  d0:	5a c4       	rjmp	.+2228   	; 0x986 <__vector_17+0x382>
  d2:	59 c4       	rjmp	.+2226   	; 0x986 <__vector_17+0x382>
  d4:	58 c4       	rjmp	.+2224   	; 0x986 <__vector_17+0x382>
  d6:	b2 c3       	rjmp	.+1892   	; 0x83c <__vector_17+0x238>
  d8:	56 c4       	rjmp	.+2220   	; 0x986 <__vector_17+0x382>
  da:	55 c4       	rjmp	.+2218   	; 0x986 <__vector_17+0x382>
  dc:	54 c4       	rjmp	.+2216   	; 0x986 <__vector_17+0x382>
  de:	53 c4       	rjmp	.+2214   	; 0x986 <__vector_17+0x382>
  e0:	52 c4       	rjmp	.+2212   	; 0x986 <__vector_17+0x382>
  e2:	51 c4       	rjmp	.+2210   	; 0x986 <__vector_17+0x382>
  e4:	50 c4       	rjmp	.+2208   	; 0x986 <__vector_17+0x382>
  e6:	b8 c3       	rjmp	.+1904   	; 0x858 <__vector_17+0x254>
  e8:	4e c4       	rjmp	.+2204   	; 0x986 <__vector_17+0x382>
  ea:	4d c4       	rjmp	.+2202   	; 0x986 <__vector_17+0x382>
  ec:	4c c4       	rjmp	.+2200   	; 0x986 <__vector_17+0x382>
  ee:	4b c4       	rjmp	.+2198   	; 0x986 <__vector_17+0x382>
  f0:	4a c4       	rjmp	.+2196   	; 0x986 <__vector_17+0x382>
  f2:	49 c4       	rjmp	.+2194   	; 0x986 <__vector_17+0x382>
  f4:	48 c4       	rjmp	.+2192   	; 0x986 <__vector_17+0x382>
  f6:	b7 c3       	rjmp	.+1902   	; 0x866 <__vector_17+0x262>
  f8:	46 c4       	rjmp	.+2188   	; 0x986 <__vector_17+0x382>
  fa:	45 c4       	rjmp	.+2186   	; 0x986 <__vector_17+0x382>
  fc:	44 c4       	rjmp	.+2184   	; 0x986 <__vector_17+0x382>
  fe:	43 c4       	rjmp	.+2182   	; 0x986 <__vector_17+0x382>
 100:	42 c4       	rjmp	.+2180   	; 0x986 <__vector_17+0x382>
 102:	41 c4       	rjmp	.+2178   	; 0x986 <__vector_17+0x382>
 104:	40 c4       	rjmp	.+2176   	; 0x986 <__vector_17+0x382>
 106:	3f c4       	rjmp	.+2174   	; 0x986 <__vector_17+0x382>
 108:	3e c4       	rjmp	.+2172   	; 0x986 <__vector_17+0x382>
 10a:	3d c4       	rjmp	.+2170   	; 0x986 <__vector_17+0x382>
 10c:	3c c4       	rjmp	.+2168   	; 0x986 <__vector_17+0x382>
 10e:	3b c4       	rjmp	.+2166   	; 0x986 <__vector_17+0x382>
 110:	3a c4       	rjmp	.+2164   	; 0x986 <__vector_17+0x382>
 112:	39 c4       	rjmp	.+2162   	; 0x986 <__vector_17+0x382>
 114:	38 c4       	rjmp	.+2160   	; 0x986 <__vector_17+0x382>
 116:	ae c3       	rjmp	.+1884   	; 0x874 <__vector_17+0x270>
 118:	36 c4       	rjmp	.+2156   	; 0x986 <__vector_17+0x382>
 11a:	35 c4       	rjmp	.+2154   	; 0x986 <__vector_17+0x382>
 11c:	34 c4       	rjmp	.+2152   	; 0x986 <__vector_17+0x382>
 11e:	33 c4       	rjmp	.+2150   	; 0x986 <__vector_17+0x382>
 120:	32 c4       	rjmp	.+2148   	; 0x986 <__vector_17+0x382>
 122:	31 c4       	rjmp	.+2146   	; 0x986 <__vector_17+0x382>
 124:	30 c4       	rjmp	.+2144   	; 0x986 <__vector_17+0x382>
 126:	c7 c3       	rjmp	.+1934   	; 0x8b6 <__vector_17+0x2b2>
 128:	2e c4       	rjmp	.+2140   	; 0x986 <__vector_17+0x382>
 12a:	2d c4       	rjmp	.+2138   	; 0x986 <__vector_17+0x382>
 12c:	2c c4       	rjmp	.+2136   	; 0x986 <__vector_17+0x382>
 12e:	2b c4       	rjmp	.+2134   	; 0x986 <__vector_17+0x382>
 130:	2a c4       	rjmp	.+2132   	; 0x986 <__vector_17+0x382>
 132:	29 c4       	rjmp	.+2130   	; 0x986 <__vector_17+0x382>
 134:	28 c4       	rjmp	.+2128   	; 0x986 <__vector_17+0x382>
 136:	c8 c3       	rjmp	.+1936   	; 0x8c8 <__vector_17+0x2c4>
 138:	26 c4       	rjmp	.+2124   	; 0x986 <__vector_17+0x382>
 13a:	25 c4       	rjmp	.+2122   	; 0x986 <__vector_17+0x382>
 13c:	24 c4       	rjmp	.+2120   	; 0x986 <__vector_17+0x382>
 13e:	23 c4       	rjmp	.+2118   	; 0x986 <__vector_17+0x382>
 140:	22 c4       	rjmp	.+2116   	; 0x986 <__vector_17+0x382>
 142:	21 c4       	rjmp	.+2114   	; 0x986 <__vector_17+0x382>
 144:	20 c4       	rjmp	.+2112   	; 0x986 <__vector_17+0x382>
 146:	c7 c3       	rjmp	.+1934   	; 0x8d6 <__vector_17+0x2d2>
 148:	1e c4       	rjmp	.+2108   	; 0x986 <__vector_17+0x382>
 14a:	1d c4       	rjmp	.+2106   	; 0x986 <__vector_17+0x382>
 14c:	1c c4       	rjmp	.+2104   	; 0x986 <__vector_17+0x382>
 14e:	1b c4       	rjmp	.+2102   	; 0x986 <__vector_17+0x382>
 150:	1a c4       	rjmp	.+2100   	; 0x986 <__vector_17+0x382>
 152:	19 c4       	rjmp	.+2098   	; 0x986 <__vector_17+0x382>
 154:	18 c4       	rjmp	.+2096   	; 0x986 <__vector_17+0x382>
 156:	c7 c3       	rjmp	.+1934   	; 0x8e6 <__vector_17+0x2e2>
 158:	16 c4       	rjmp	.+2092   	; 0x986 <__vector_17+0x382>
 15a:	15 c4       	rjmp	.+2090   	; 0x986 <__vector_17+0x382>
 15c:	14 c4       	rjmp	.+2088   	; 0x986 <__vector_17+0x382>
 15e:	13 c4       	rjmp	.+2086   	; 0x986 <__vector_17+0x382>
 160:	12 c4       	rjmp	.+2084   	; 0x986 <__vector_17+0x382>
 162:	11 c4       	rjmp	.+2082   	; 0x986 <__vector_17+0x382>
 164:	10 c4       	rjmp	.+2080   	; 0x986 <__vector_17+0x382>
 166:	cc c3       	rjmp	.+1944   	; 0x900 <__vector_17+0x2fc>
 168:	0e c4       	rjmp	.+2076   	; 0x986 <__vector_17+0x382>
 16a:	0d c4       	rjmp	.+2074   	; 0x986 <__vector_17+0x382>
 16c:	0c c4       	rjmp	.+2072   	; 0x986 <__vector_17+0x382>
 16e:	0b c4       	rjmp	.+2070   	; 0x986 <__vector_17+0x382>
 170:	0a c4       	rjmp	.+2068   	; 0x986 <__vector_17+0x382>
 172:	09 c4       	rjmp	.+2066   	; 0x986 <__vector_17+0x382>
 174:	08 c4       	rjmp	.+2064   	; 0x986 <__vector_17+0x382>
 176:	db c3       	rjmp	.+1974   	; 0x92e <__vector_17+0x32a>
 178:	06 c4       	rjmp	.+2060   	; 0x986 <__vector_17+0x382>
 17a:	05 c4       	rjmp	.+2058   	; 0x986 <__vector_17+0x382>
 17c:	04 c4       	rjmp	.+2056   	; 0x986 <__vector_17+0x382>
 17e:	03 c4       	rjmp	.+2054   	; 0x986 <__vector_17+0x382>
 180:	02 c4       	rjmp	.+2052   	; 0x986 <__vector_17+0x382>
 182:	01 c4       	rjmp	.+2050   	; 0x986 <__vector_17+0x382>
 184:	00 c4       	rjmp	.+2048   	; 0x986 <__vector_17+0x382>
 186:	db c3       	rjmp	.+1974   	; 0x93e <__vector_17+0x33a>
 188:	fe c3       	rjmp	.+2044   	; 0x986 <__vector_17+0x382>
 18a:	fd c3       	rjmp	.+2042   	; 0x986 <__vector_17+0x382>
 18c:	fc c3       	rjmp	.+2040   	; 0x986 <__vector_17+0x382>
 18e:	fb c3       	rjmp	.+2038   	; 0x986 <__vector_17+0x382>
 190:	fa c3       	rjmp	.+2036   	; 0x986 <__vector_17+0x382>
 192:	f9 c3       	rjmp	.+2034   	; 0x986 <__vector_17+0x382>
 194:	f8 c3       	rjmp	.+2032   	; 0x986 <__vector_17+0x382>
 196:	e8 c3       	rjmp	.+2000   	; 0x968 <__vector_17+0x364>
 198:	f6 c3       	rjmp	.+2028   	; 0x986 <__vector_17+0x382>
 19a:	f5 c3       	rjmp	.+2026   	; 0x986 <__vector_17+0x382>
 19c:	f4 c3       	rjmp	.+2024   	; 0x986 <__vector_17+0x382>
 19e:	f3 c3       	rjmp	.+2022   	; 0x986 <__vector_17+0x382>
 1a0:	f2 c3       	rjmp	.+2020   	; 0x986 <__vector_17+0x382>
 1a2:	f1 c3       	rjmp	.+2018   	; 0x986 <__vector_17+0x382>
 1a4:	f0 c3       	rjmp	.+2016   	; 0x986 <__vector_17+0x382>
 1a6:	e8 c3       	rjmp	.+2000   	; 0x978 <__vector_17+0x374>

000001a8 <__trampolines_end>:
 1a8:	09 02       	muls	r16, r25
 1aa:	12 00       	.word	0x0012	; ????
 1ac:	01 01       	movw	r0, r2
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <__trampolines_end+0x8>
 1b0:	32 09       	sbc	r19, r2
 1b2:	04 00       	.word	0x0004	; ????
 1b4:	00 00       	nop
 1b6:	00 00       	nop
	...

000001ba <usbDescriptorDevice>:
 1ba:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
 1ca:	00 01                                               ..

000001cc <usbDescriptorStringDevice>:
 1cc:	16 03 51 00 43 00 4d 00 20 00 4c 00 6f 00 67 00     ..Q.C.M. .L.o.g.
 1dc:	67 00 65 00 72 00                                   g.e.r.

000001e2 <usbDescriptorStringVendor>:
 1e2:	18 03 45 00 78 00 45 00 20 00 49 00 6e 00 73 00     ..E.x.E. .I.n.s.
 1f2:	54 00 65 00 63 00 68 00                             T.e.c.h.

000001fa <usbDescriptorString0>:
 1fa:	04 03 09 04                                         ....

000001fe <__ctors_end>:
 1fe:	11 24       	eor	r1, r1
 200:	1f be       	out	0x3f, r1	; 63
 202:	cf e5       	ldi	r28, 0x5F	; 95
 204:	d4 e0       	ldi	r29, 0x04	; 4
 206:	de bf       	out	0x3e, r29	; 62
 208:	cd bf       	out	0x3d, r28	; 61

0000020a <__do_copy_data>:
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	a0 e6       	ldi	r26, 0x60	; 96
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	e6 ec       	ldi	r30, 0xC6	; 198
 212:	fc e0       	ldi	r31, 0x0C	; 12
 214:	02 c0       	rjmp	.+4      	; 0x21a <__do_copy_data+0x10>
 216:	05 90       	lpm	r0, Z+
 218:	0d 92       	st	X+, r0
 21a:	a2 36       	cpi	r26, 0x62	; 98
 21c:	b1 07       	cpc	r27, r17
 21e:	d9 f7       	brne	.-10     	; 0x216 <__do_copy_data+0xc>

00000220 <__do_clear_bss>:
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	a2 e6       	ldi	r26, 0x62	; 98
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	01 c0       	rjmp	.+2      	; 0x22a <.do_clear_bss_start>

00000228 <.do_clear_bss_loop>:
 228:	1d 92       	st	X+, r1

0000022a <.do_clear_bss_start>:
 22a:	a2 3b       	cpi	r26, 0xB2	; 178
 22c:	b2 07       	cpc	r27, r18
 22e:	e1 f7       	brne	.-8      	; 0x228 <.do_clear_bss_loop>
 230:	22 d4       	rcall	.+2116   	; 0xa76 <main>
 232:	47 c5       	rjmp	.+2702   	; 0xcc2 <_exit>

00000234 <__bad_interrupt>:
 234:	e5 ce       	rjmp	.-566    	; 0x0 <__vectors>

00000236 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 236:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 238:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 23a:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 23e:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 240:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 242:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 244:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 246:	09 c0       	rjmp	.+18     	; 0x25a <usbCrcLoopEntry>

00000248 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 248:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 24a:	82 27       	eor	r24, r18

0000024c <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 24c:	97 95       	ror	r25
    ror     resCrcL
 24e:	87 95       	ror	r24
    brcs    usbCrcNoXor
 250:	10 f0       	brcs	.+4      	; 0x256 <usbCrcNoXor>
    eor     resCrcL, polyL
 252:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 254:	95 27       	eor	r25, r21

00000256 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 256:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 258:	c8 f3       	brcs	.-14     	; 0x24c <usbCrcBitLoop>

0000025a <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 25a:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 25c:	a8 f3       	brcs	.-22     	; 0x248 <usbCrcByteLoop>

0000025e <usbCrcReady>:
usbCrcReady:
    ret
 25e:	08 95       	ret

00000260 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 260:	ea df       	rcall	.-44     	; 0x236 <usbCrc16>
    st      ptr+, resCrcL
 262:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 264:	9d 93       	st	X+, r25
    ret
 266:	08 95       	ret

00000268 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 268:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 26a:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 26c:	cf 93       	push	r28

0000026e <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 26e:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 270:	83 9b       	sbis	0x10, 3	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 272:	e9 f7       	brne	.-6      	; 0x26e <waitForJ>

00000274 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 274:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 276:	09 c0       	rjmp	.+18     	; 0x28a <foundK>
    sbis    USBIN, USBMINUS
 278:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 27a:	07 c0       	rjmp	.+14     	; 0x28a <foundK>
    sbis    USBIN, USBMINUS
 27c:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 27e:	05 c0       	rjmp	.+10     	; 0x28a <foundK>
    sbis    USBIN, USBMINUS
 280:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 282:	03 c0       	rjmp	.+6      	; 0x28a <foundK>
    sbis    USBIN, USBMINUS
 284:	83 9b       	sbis	0x10, 3	; 16
    rjmp    foundK
 286:	01 c0       	rjmp	.+2      	; 0x28a <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 288:	a1 c0       	rjmp	.+322    	; 0x3cc <sofError>

0000028a <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 28a:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 28c:	c0 91 95 00 	lds	r28, 0x0095
    clr     YH                  ;1 [5]
 290:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 292:	c4 56       	subi	r28, 0x64	; 100
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 294:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 296:	83 9b       	sbis	0x10, 3	; 16
    rjmp    haveTwoBitsK    ;2 [10]
 298:	02 c0       	rjmp	.+4      	; 0x29e <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 29a:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 29c:	eb cf       	rjmp	.-42     	; 0x274 <waitForK>

0000029e <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 29e:	2f 93       	push	r18
    push    x1              ;2 [12]
 2a0:	0f 93       	push	r16
    push    x2              ;2 [14]
 2a2:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 2a4:	00 b3       	in	r16, 0x10	; 16
    ldi     shift, 0xff     ;1 [18]
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 2a8:	03 fb       	bst	r16, 3
    bld     shift, 0        ;1 [20]
 2aa:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 2ac:	4f 93       	push	r20
    push    cnt             ;2 [24]
 2ae:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 2b0:	10 b3       	in	r17, 0x10	; 16
    ser     x3              ;1 [26] [inserted init instruction]
 2b2:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 2b4:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 2b6:	03 fb       	bst	r16, 3
    bld     shift, 1        ;1 [29]
 2b8:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 2ba:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 2bc:	31 c0       	rjmp	.+98     	; 0x320 <rxbit2>

000002be <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 2be:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 2c0:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 2c2:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x01 ;1 [18]
 2c4:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 2c6:	28 c0       	rjmp	.+80     	; 0x318 <didUnstuff0>

000002c8 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 2c8:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 2ca:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 2cc:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 2ce:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 2d0:	00 b3       	in	r16, 0x10	; 16
    rjmp    didUnstuff1 ;2 [27]
 2d2:	29 c0       	rjmp	.+82     	; 0x326 <didUnstuff1>

000002d4 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 2d4:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 2d6:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 2d8:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 2da:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 2dc:	10 b3       	in	r17, 0x10	; 16
    rjmp    didUnstuff2 ;2 [35]
 2de:	2b c0       	rjmp	.+86     	; 0x336 <didUnstuff2>

000002e0 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 2e0:	10 b3       	in	r17, 0x10	; 16
    andi    x3, ~0x08   ;1 [35]
 2e2:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 2e4:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 2e6:	2a c0       	rjmp	.+84     	; 0x33c <didUnstuff3>

000002e8 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 2e8:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 2ea:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x10 ;1 [42]
 2ec:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 2ee:	2c c0       	rjmp	.+88     	; 0x348 <didUnstuff4>

000002f0 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 2f0:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 2f2:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x20 ;1 [50]
 2f4:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 2f6:	2f c0       	rjmp	.+94     	; 0x356 <didUnstuff5>

000002f8 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 2f8:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 2fa:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x40 ;1 [58]
 2fc:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 2fe:	32 c0       	rjmp	.+100    	; 0x364 <didUnstuff6>

00000300 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 300:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 302:	00 b3       	in	r16, 0x10	; 16
    st      y+, x3      ;2 [3] store data
 304:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 306:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 308:	00 00       	nop
    eor     x2, x1      ;1 [6]
 30a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 30c:	13 fb       	bst	r17, 3
    bld     shift, 0    ;1 [8]
 30e:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 310:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;1 [10]
 312:	1c 70       	andi	r17, 0x0C	; 12
    breq    se0         ;1 [11] SE0 check for bit 1
 314:	c9 f1       	breq	.+114    	; 0x388 <se0>
    andi    shift, 0xf9 ;1 [12]
 316:	29 7f       	andi	r18, 0xF9	; 249

00000318 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 318:	91 f2       	breq	.-92     	; 0x2be <unstuff0>
    eor     x1, x2      ;1 [14]
 31a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 31c:	03 fb       	bst	r16, 3
    bld     shift, 1    ;1 [16]
 31e:	21 f9       	bld	r18, 1

00000320 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 320:	00 b3       	in	r16, 0x10	; 16
    andi    shift, 0xf3 ;1 [18]
 322:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 324:	89 f2       	breq	.-94     	; 0x2c8 <unstuff1>

00000326 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 326:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 328:	58 f1       	brcs	.+86     	; 0x380 <overflow>
    eor     x2, x1      ;1 [22]
 32a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 32c:	13 fb       	bst	r17, 3
    bld     shift, 2    ;1 [24]
 32e:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 330:	10 b3       	in	r17, 0x10	; 16
    andi    shift, 0xe7 ;1 [26]
 332:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 334:	79 f2       	breq	.-98     	; 0x2d4 <unstuff2>

00000336 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 336:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 338:	03 fb       	bst	r16, 3
    bld     shift, 3    ;1 [30]
 33a:	23 f9       	bld	r18, 3

0000033c <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 33c:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 33e:	81 f2       	breq	.-96     	; 0x2e0 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 340:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [34]
 342:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 344:	13 fb       	bst	r17, 3
    bld     shift, 4    ;1 [36]
 346:	24 f9       	bld	r18, 4

00000348 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 348:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 34a:	71 f2       	breq	.-100    	; 0x2e8 <unstuff4>
    nop2                ;2 [40]
 34c:	00 c0       	rjmp	.+0      	; 0x34e <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 34e:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [42]
 350:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 352:	03 fb       	bst	r16, 3
    bld     shift, 5    ;1 [44]
 354:	25 f9       	bld	r18, 5

00000356 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 356:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 358:	59 f2       	breq	.-106    	; 0x2f0 <unstuff5>
    nop2                ;2 [48]
 35a:	00 c0       	rjmp	.+0      	; 0x35c <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 35c:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [50]
 35e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 360:	13 fb       	bst	r17, 3
    bld     shift, 6    ;1 [52]
 362:	26 f9       	bld	r18, 6

00000364 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 364:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 366:	40 f2       	brcs	.-112    	; 0x2f8 <unstuff6>
    nop2                ;2 [56]
 368:	00 c0       	rjmp	.+0      	; 0x36a <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 36a:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [58]
 36c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 36e:	03 fb       	bst	r16, 3
    bld     shift, 7    ;1 [60]
 370:	27 f9       	bld	r18, 7

00000372 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 372:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 374:	28 f6       	brcc	.-118    	; 0x300 <rxLoop>

00000376 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 376:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 378:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 37a:	10 b3       	in	r17, 0x10	; 16
    nop                 ;1 [66]
 37c:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 37e:	f9 cf       	rjmp	.-14     	; 0x372 <didUnstuff7>

00000380 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 380:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 382:	1a bf       	out	0x3a, r17	; 58

00000384 <ignorePacket>:
ignorePacket:
    clr     token
 384:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 386:	17 c0       	rjmp	.+46     	; 0x3b6 <handleSetupOrOut>

00000388 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 388:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 38a:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 38c:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 38e:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 390:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 392:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 394:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 396:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 398:	e9 f0       	breq	.+58     	; 0x3d4 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 39a:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 39c:	d9 f0       	breq	.+54     	; 0x3d4 <handleData>
    lds     shift, usbDeviceAddr;[17]
 39e:	20 91 93 00 	lds	r18, 0x0093
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 3a2:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 3a4:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 3a6:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 3a8:	ed cf       	rjmp	.-38     	; 0x384 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
    rol     x3                  ;[26] shift in LSB of endpoint
#endif
    cpi     token, USBPID_IN    ;[27]
 3aa:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 3ac:	41 f1       	breq	.+80     	; 0x3fe <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 3ae:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 3b0:	11 f0       	breq	.+4      	; 0x3b6 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 3b2:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 3b4:	39 f7       	brne	.-50     	; 0x384 <ignorePacket>

000003b6 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 3b6:	00 93 9a 00 	sts	0x009A, r16

000003ba <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 3ba:	3f 91       	pop	r19
 3bc:	4f 91       	pop	r20
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	2f 91       	pop	r18
 3c4:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 3c6:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 3c8:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 3ca:	51 cf       	rjmp	.-350    	; 0x26e <waitForJ>

000003cc <sofError>:
sofError:
    POP_RETI                    ;macro call
 3cc:	cf 91       	pop	r28
 3ce:	cf bf       	out	0x3f, r28	; 63
 3d0:	cf 91       	pop	r28
    reti
 3d2:	18 95       	reti

000003d4 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 3d4:	20 91 9a 00 	lds	r18, 0x009A
    tst     shift               ;[20]
 3d8:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 3da:	79 f3       	breq	.-34     	; 0x3ba <doReturn>
    lds     x2, usbRxLen        ;[22]
 3dc:	10 91 98 00 	lds	r17, 0x0098
    tst     x2                  ;[24]
 3e0:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 3e2:	11 f5       	brne	.+68     	; 0x428 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 3e4:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 3e6:	12 f1       	brmi	.+68     	; 0x42c <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 3e8:	30 93 98 00 	sts	0x0098, r19
    sts     usbRxToken, shift   ;[30]
 3ec:	20 93 94 00 	sts	0x0094, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 3f0:	10 91 95 00 	lds	r17, 0x0095
    ldi     cnt, USB_BUFSIZE    ;[34]
 3f4:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 3f6:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 3f8:	30 93 95 00 	sts	0x0095, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 3fc:	17 c0       	rjmp	.+46     	; 0x42c <sendAckAndReti>

000003fe <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 3fe:	00 91 98 00 	lds	r16, 0x0098
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 402:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 404:	8c f4       	brge	.+34     	; 0x428 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 406:	0a e5       	ldi	r16, 0x5A	; 90
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 408:	30 91 61 00 	lds	r19, 0x0061
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 40c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 40e:	10 c0       	rjmp	.+32     	; 0x430 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 410:	00 93 61 00 	sts	0x0061, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 414:	c8 e8       	ldi	r28, 0x88	; 136
    ldi     YH, hi8(usbTxBuf)   ;[44]
 416:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 418:	0f c0       	rjmp	.+30     	; 0x438 <usbSendAndReti>

0000041a <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 41a:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 41c:	a8 f4       	brcc	.+42     	; 0x448 <doExorN1>
    subi    x4, 1               ;[-3]
 41e:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 420:	a9 f4       	brne	.+42     	; 0x44c <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 422:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 424:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 426:	f9 cf       	rjmp	.-14     	; 0x41a <stuffN1Delay>

00000428 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 428:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 42a:	03 c0       	rjmp	.+6      	; 0x432 <usbSendX3>

0000042c <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 42c:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 42e:	01 c0       	rjmp	.+2      	; 0x432 <usbSendX3>

00000430 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 430:	43 2f       	mov	r20, r19

00000432 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 432:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 434:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 436:	32 e0       	ldi	r19, 0x02	; 2

00000438 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 438:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK         ;[-11]
 43a:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 43c:	93 9a       	sbi	0x12, 3	; 18
    out     USBDDR, x2          ;[-8] <--- acquire bus
 43e:	11 bb       	out	0x11, r17	; 17
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 440:	02 b3       	in	r16, 0x12	; 18
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 442:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 444:	1c e0       	ldi	r17, 0x0C	; 12
    push    x4                  ;[-4]
 446:	5f 93       	push	r21

00000448 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 448:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 44a:	56 e0       	ldi	r21, 0x06	; 6

0000044c <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 44c:	02 bb       	out	0x12, r16	; 18
    ror     shift               ;[01]
 44e:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 450:	20 f4       	brcc	.+8      	; 0x45a <doExorN2>
    subi    x4, 1               ;[03]
 452:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 454:	21 f4       	brne	.+8      	; 0x45e <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 456:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 458:	f9 cf       	rjmp	.-14     	; 0x44c <commonN1>

0000045a <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 45a:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 45c:	56 e0       	ldi	r21, 0x06	; 6

0000045e <commonN2>:
commonN2:
    nop                         ;[06] [14]
 45e:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 460:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 462:	02 bb       	out	0x12, r16	; 18
    brcs    txBitloop           ;[09]      [25] [41]
 464:	d0 f2       	brcs	.-76     	; 0x41a <stuffN1Delay>

00000466 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 466:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 468:	28 f4       	brcc	.+10     	; 0x474 <doExor6>
    subi    x4, 1               ;[44]
 46a:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 46c:	29 f4       	brne	.+10     	; 0x478 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 46e:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 470:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 472:	f9 cf       	rjmp	.-14     	; 0x466 <stuff6Delay>

00000474 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 474:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 476:	56 e0       	ldi	r21, 0x06	; 6

00000478 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 478:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 47a:	02 bb       	out	0x12, r16	; 18
    brcc    doExor7             ;[49]
 47c:	20 f4       	brcc	.+8      	; 0x486 <doExor7>
    subi    x4, 1               ;[50]
 47e:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 480:	21 f4       	brne	.+8      	; 0x48a <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 482:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 484:	f9 cf       	rjmp	.-14     	; 0x478 <common6>

00000486 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 486:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 488:	56 e0       	ldi	r21, 0x06	; 6

0000048a <common7>:
common7:
    ld      shift, y+           ;[53]
 48a:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 48c:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 48e:	02 bb       	out	0x12, r16	; 18
    brne    txByteLoop          ;[57]
 490:	21 f6       	brne	.-120    	; 0x41a <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 492:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[59]
 494:	10 91 99 00 	lds	r17, 0x0099
    lsl     x2                  ;[61] we compare with left shifted address
 498:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 49a:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 49c:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 49e:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 4a0:	11 f0       	breq	.+4      	; 0x4a6 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 4a2:	10 93 93 00 	sts	0x0093, r17

000004a6 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 4a6:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 4a8:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 4aa:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR          ;[06]
 4ac:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK         ;[07] set both pins to input
 4ae:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1              ;[08]
 4b0:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 4b2:	43 7f       	andi	r20, 0xF3	; 243
    pop     x4                  ;[10]
 4b4:	5f 91       	pop	r21
    nop2                        ;[12]
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <skipAddrAssign+0x12>
    nop2                        ;[14]
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 4ba:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2          ;[17] <-- release bus now
 4bc:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 4be:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 4c0:	7c cf       	rjmp	.-264    	; 0x3ba <doReturn>

000004c2 <i2c_start>:
	TWCR |= (1<<TWEN);
}

void i2c_start(void)
{
	TWCR |= (1<<TWSTA);
 4c2:	86 b7       	in	r24, 0x36	; 54
 4c4:	80 62       	ori	r24, 0x20	; 32
 4c6:	86 bf       	out	0x36, r24	; 54
	TWCR |= (1<<TWINT);
 4c8:	86 b7       	in	r24, 0x36	; 54
 4ca:	80 68       	ori	r24, 0x80	; 128
 4cc:	86 bf       	out	0x36, r24	; 54
 4ce:	08 95       	ret

000004d0 <i2c_resetStatus>:
}

void i2c_resetStatus ()
{
	uint8_t i = 0;
	s_data = 0;
 4d0:	10 92 69 00 	sts	0x0069, r1
	s_remainingData = 0;
 4d4:	10 92 68 00 	sts	0x0068, r1
	s_isI2CBusy = 0;
 4d8:	10 92 67 00 	sts	0x0067, r1
	s_numOfData = 0;
 4dc:	10 92 66 00 	sts	0x0066, r1
	s_cmd = 0;
 4e0:	10 92 65 00 	sts	0x0065, r1
	s_retries = 0;
 4e4:	10 92 64 00 	sts	0x0064, r1
	s_dataSeqNumber = 0;
 4e8:	10 92 62 00 	sts	0x0062, r1
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	90 e0       	ldi	r25, 0x00	; 0
	for(; i < MAX_DATA_LENGTH; i++) s_payLoad[i] = 0;
 4f0:	fc 01       	movw	r30, r24
 4f2:	e1 58       	subi	r30, 0x81	; 129
 4f4:	ff 4f       	sbci	r31, 0xFF	; 255
 4f6:	10 82       	st	Z, r1
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	88 30       	cpi	r24, 0x08	; 8
 4fc:	91 05       	cpc	r25, r1
 4fe:	c1 f7       	brne	.-16     	; 0x4f0 <i2c_resetStatus+0x20>
}
 500:	08 95       	ret

00000502 <i2c_saveData>:

void i2c_saveData()
{
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i = 0;
	for(; i < MAX_DATA_LENGTH; i++) s_dataStorage [i] = s_payLoad[i];
 506:	fc 01       	movw	r30, r24
 508:	e1 58       	subi	r30, 0x81	; 129
 50a:	ff 4f       	sbci	r31, 0xFF	; 255
 50c:	20 81       	ld	r18, Z
 50e:	fc 01       	movw	r30, r24
 510:	e3 59       	subi	r30, 0x93	; 147
 512:	ff 4f       	sbci	r31, 0xFF	; 255
 514:	20 83       	st	Z, r18
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	88 30       	cpi	r24, 0x08	; 8
 51a:	91 05       	cpc	r25, r1
 51c:	a1 f7       	brne	.-24     	; 0x506 <i2c_saveData+0x4>
}
 51e:	08 95       	ret

00000520 <usbFunctionSetup>:
}dataToSend_t;

volatile dataToSend_t data;

USB_PUBLIC usbMsgLen_t usbFunctionSetup(uchar data[8])
{
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	00 d0       	rcall	.+0      	; 0x526 <usbFunctionSetup+0x6>
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	9a 83       	std	Y+2, r25	; 0x02
 52c:	89 83       	std	Y+1, r24	; 0x01
	usbRequest_t *request = (void*) data;
	switch (request->bRequest)
 52e:	fc 01       	movw	r30, r24
 530:	81 81       	ldd	r24, Z+1	; 0x01
 532:	81 30       	cpi	r24, 0x01	; 1
 534:	41 f4       	brne	.+16     	; 0x546 <usbFunctionSetup+0x26>
	{
		case SEND_DATA:
			{
				usbMsgPtr = (usbMsgPtr_t) &data;
 536:	ce 01       	movw	r24, r28
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	90 93 97 00 	sts	0x0097, r25
 53e:	80 93 96 00 	sts	0x0096, r24
				return sizeof(data);
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	01 c0       	rjmp	.+2      	; 0x548 <usbFunctionSetup+0x28>
			}break;
	}
	return 0;
 546:	80 e0       	ldi	r24, 0x00	; 0
}
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <setSpecificI2c_prepComm>:

void setSpecificI2c_prepComm (uint8_t cmd, uint8_t* payLoad, uint8_t payLoadSize)
{
	uint8_t i = 0;
	switch (cmd)
 552:	82 30       	cpi	r24, 0x02	; 2
 554:	39 f0       	breq	.+14     	; 0x564 <setSpecificI2c_prepComm+0x12>
 556:	83 30       	cpi	r24, 0x03	; 3
 558:	41 f0       	breq	.+16     	; 0x56a <setSpecificI2c_prepComm+0x18>
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	91 f5       	brne	.+100    	; 0x5c2 <setSpecificI2c_prepComm+0x70>
	{
		case SEND_MEASUREMENT_DATA:
		{
			s_remainingData = payLoadSize;
 55e:	40 93 68 00 	sts	0x0068, r20
		}break;
 562:	08 95       	ret
		case SEND_THERMAL_DATA:
		{
			s_remainingData = payLoadSize;
 564:	40 93 68 00 	sts	0x0068, r20
		}break;
 568:	08 95       	ret
		case TEST_COMM:
		{
			if(payLoad)
 56a:	61 15       	cp	r22, r1
 56c:	71 05       	cpc	r23, r1
 56e:	19 f4       	brne	.+6      	; 0x576 <setSpecificI2c_prepComm+0x24>
				s_data = s_payLoad[0];
			}
			else
			{
				//Invalid payLoad pointer!!!
				for (i = 0; i < payLoadSize; ++i)
 570:	41 11       	cpse	r20, r1
 572:	16 c0       	rjmp	.+44     	; 0x5a0 <setSpecificI2c_prepComm+0x4e>
 574:	1f c0       	rjmp	.+62     	; 0x5b4 <setSpecificI2c_prepComm+0x62>
		}break;
		case TEST_COMM:
		{
			if(payLoad)
			{
				for (i = 0; i < payLoadSize; ++i)
 576:	44 23       	and	r20, r20
 578:	59 f0       	breq	.+22     	; 0x590 <setSpecificI2c_prepComm+0x3e>
 57a:	fb 01       	movw	r30, r22
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
				{
					s_payLoad[i] = payLoad[i];
 580:	21 91       	ld	r18, Z+
 582:	dc 01       	movw	r26, r24
 584:	a1 58       	subi	r26, 0x81	; 129
 586:	bf 4f       	sbci	r27, 0xFF	; 255
 588:	2c 93       	st	X, r18
 58a:	01 96       	adiw	r24, 0x01	; 1
		}break;
		case TEST_COMM:
		{
			if(payLoad)
			{
				for (i = 0; i < payLoadSize; ++i)
 58c:	84 17       	cp	r24, r20
 58e:	c0 f3       	brcs	.-16     	; 0x580 <setSpecificI2c_prepComm+0x2e>
				{
					s_payLoad[i] = payLoad[i];
				}
				s_remainingData = payLoadSize - 1;
 590:	41 50       	subi	r20, 0x01	; 1
 592:	40 93 68 00 	sts	0x0068, r20
				s_data = s_payLoad[0];
 596:	80 91 7f 00 	lds	r24, 0x007F
 59a:	80 93 69 00 	sts	0x0069, r24
 59e:	08 95       	ret
			}
			else
			{
				//Invalid payLoad pointer!!!
				for (i = 0; i < payLoadSize; ++i)
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	90 e0       	ldi	r25, 0x00	; 0
				{
					//If you see this continuously in your comm line
					//it means you gave an invalid payLoad pointer!!!
					s_payLoad[i] = 0xaa;
 5a4:	2a ea       	ldi	r18, 0xAA	; 170
 5a6:	fc 01       	movw	r30, r24
 5a8:	e1 58       	subi	r30, 0x81	; 129
 5aa:	ff 4f       	sbci	r31, 0xFF	; 255
 5ac:	20 83       	st	Z, r18
 5ae:	01 96       	adiw	r24, 0x01	; 1
				s_data = s_payLoad[0];
			}
			else
			{
				//Invalid payLoad pointer!!!
				for (i = 0; i < payLoadSize; ++i)
 5b0:	84 17       	cp	r24, r20
 5b2:	c8 f3       	brcs	.-14     	; 0x5a6 <setSpecificI2c_prepComm+0x54>
				{
					//If you see this continuously in your comm line
					//it means you gave an invalid payLoad pointer!!!
					s_payLoad[i] = 0xaa;
				}
				s_remainingData = payLoadSize - 1;
 5b4:	41 50       	subi	r20, 0x01	; 1
 5b6:	40 93 68 00 	sts	0x0068, r20
				s_data = s_payLoad[0];
 5ba:	80 91 7f 00 	lds	r24, 0x007F
 5be:	80 93 69 00 	sts	0x0069, r24
 5c2:	08 95       	ret

000005c4 <i2c_prepComm>:
		}break;
	}*/
//========================================================================================================

void i2c_prepComm (uint8_t slaveAddr, uint8_t cmd, uint8_t* payLoad, uint8_t payLoadSize)
{
 5c4:	96 2f       	mov	r25, r22
 5c6:	ba 01       	movw	r22, r20
	//Default prepComm init for any command given
	s_isI2CBusy = 1;
 5c8:	31 e0       	ldi	r19, 0x01	; 1
 5ca:	30 93 67 00 	sts	0x0067, r19
	s_slaveAddr = slaveAddr;
 5ce:	80 93 6a 00 	sts	0x006A, r24
	s_numOfData = payLoadSize;
 5d2:	20 93 66 00 	sts	0x0066, r18
	s_cmd = cmd;
 5d6:	90 93 65 00 	sts	0x0065, r25
	s_isCmdSent = 0;
 5da:	10 92 63 00 	sts	0x0063, r1
	
	//specific prepComm init per command given
	setSpecificI2c_prepComm (s_cmd, payLoad, s_numOfData);
 5de:	40 91 66 00 	lds	r20, 0x0066
 5e2:	80 91 65 00 	lds	r24, 0x0065
 5e6:	b5 df       	rcall	.-150    	; 0x552 <setSpecificI2c_prepComm>
 5e8:	08 95       	ret

000005ea <setSpecificI2c_restartDataDir>:
	}
}

void setSpecificI2c_restartDataDir(uint8_t cmd)
{
	switch (cmd)
 5ea:	82 30       	cpi	r24, 0x02	; 2
 5ec:	31 f0       	breq	.+12     	; 0x5fa <setSpecificI2c_restartDataDir+0x10>
 5ee:	83 30       	cpi	r24, 0x03	; 3
 5f0:	31 f0       	breq	.+12     	; 0x5fe <setSpecificI2c_restartDataDir+0x14>
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	31 f4       	brne	.+12     	; 0x602 <setSpecificI2c_restartDataDir+0x18>
	{
		case SEND_MEASUREMENT_DATA:
		{
			TWDR |= READ;
 5f6:	18 9a       	sbi	0x03, 0	; 3
		}break;
 5f8:	08 95       	ret
		case SEND_THERMAL_DATA:
		{
			TWDR |= READ;
 5fa:	18 9a       	sbi	0x03, 0	; 3
		}break;
 5fc:	08 95       	ret
		case TEST_COMM:
		{
			TWDR |= WRITE;
 5fe:	83 b1       	in	r24, 0x03	; 3
 600:	83 b9       	out	0x03, r24	; 3
 602:	08 95       	ret

00000604 <__vector_17>:
	uint8_t i = 0;
	for(; i < MAX_DATA_LENGTH; i++) s_dataStorage [i] = s_payLoad[i];
}

ISR (TWI_vect, ISR_BLOCK)
{
 604:	1f 92       	push	r1
 606:	0f 92       	push	r0
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	0f 92       	push	r0
 60c:	11 24       	eor	r1, r1
 60e:	2f 93       	push	r18
 610:	3f 93       	push	r19
 612:	4f 93       	push	r20
 614:	5f 93       	push	r21
 616:	6f 93       	push	r22
 618:	7f 93       	push	r23
 61a:	8f 93       	push	r24
 61c:	9f 93       	push	r25
 61e:	af 93       	push	r26
 620:	bf 93       	push	r27
 622:	ef 93       	push	r30
 624:	ff 93       	push	r31
	switch(TWSR&0xf8)
 626:	81 b1       	in	r24, 0x01	; 1
 628:	e8 2f       	mov	r30, r24
 62a:	e8 7f       	andi	r30, 0xF8	; 248
 62c:	8e 2f       	mov	r24, r30
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	fc 01       	movw	r30, r24
 632:	38 97       	sbiw	r30, 0x08	; 8
 634:	e1 3c       	cpi	r30, 0xC1	; 193
 636:	f1 05       	cpc	r31, r1
 638:	08 f0       	brcs	.+2      	; 0x63c <__vector_17+0x38>
 63a:	a5 c1       	rjmp	.+842    	; 0x986 <__vector_17+0x382>
 63c:	ed 5e       	subi	r30, 0xED	; 237
 63e:	ff 4f       	sbci	r31, 0xFF	; 255
 640:	09 94       	ijmp
	{
//==================================MASTER TRANSMITTER MODE=======================================
		case START_OK:
		{	
			//load the slave address that's being addressed
			TWDR = (s_slaveAddr << 1);
 642:	80 91 6a 00 	lds	r24, 0x006A
 646:	88 0f       	add	r24, r24
 648:	83 b9       	out	0x03, r24	; 3
			TWDR &= 0xfe;	//just to make sure that LSB of TWDR will be zero
 64a:	18 98       	cbi	0x03, 0	; 3
			TWDR |= WRITE;	//READ/WRITE bit at START will always set as WRITE to send the command byte properly to the addressed slave
 64c:	83 b1       	in	r24, 0x03	; 3
 64e:	83 b9       	out	0x03, r24	; 3
			TWCR &= ~(1<<TWSTA);
 650:	86 b7       	in	r24, 0x36	; 54
 652:	8f 7d       	andi	r24, 0xDF	; 223
 654:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 656:	86 b7       	in	r24, 0x36	; 54
 658:	80 68       	ori	r24, 0x80	; 128
 65a:	86 bf       	out	0x36, r24	; 54
		}break;
 65c:	94 c1       	rjmp	.+808    	; 0x986 <__vector_17+0x382>
		case RESTART_OK:
		{
			//load the slave address that's being addressed
			TWDR = (s_slaveAddr << 1);
 65e:	80 91 6a 00 	lds	r24, 0x006A
 662:	88 0f       	add	r24, r24
 664:	83 b9       	out	0x03, r24	; 3
			TWDR &= 0xfe; //just to make sure that LSB of TWDR will be zero
 666:	18 98       	cbi	0x03, 0	; 3
			setSpecificI2c_restartDataDir(s_cmd);
 668:	80 91 65 00 	lds	r24, 0x0065
 66c:	be df       	rcall	.-132    	; 0x5ea <setSpecificI2c_restartDataDir>
			TWCR &= ~(1<<TWSTA);
 66e:	86 b7       	in	r24, 0x36	; 54
 670:	8f 7d       	andi	r24, 0xDF	; 223
 672:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 674:	86 b7       	in	r24, 0x36	; 54
 676:	80 68       	ori	r24, 0x80	; 128
 678:	86 bf       	out	0x36, r24	; 54
		}break;
 67a:	85 c1       	rjmp	.+778    	; 0x986 <__vector_17+0x382>
		case SLA_W_ACK:
		{
			//Load the data and send it to the slave
			if(!s_isCmdSent)
 67c:	80 91 63 00 	lds	r24, 0x0063
 680:	81 11       	cpse	r24, r1
 682:	04 c0       	rjmp	.+8      	; 0x68c <__vector_17+0x88>
				TWDR = s_cmd;
 684:	80 91 65 00 	lds	r24, 0x0065
 688:	83 b9       	out	0x03, r24	; 3
 68a:	03 c0       	rjmp	.+6      	; 0x692 <__vector_17+0x8e>
			else
				TWDR = s_data;
 68c:	80 91 69 00 	lds	r24, 0x0069
 690:	83 b9       	out	0x03, r24	; 3
			TWCR |= (1<<TWINT);
 692:	86 b7       	in	r24, 0x36	; 54
 694:	80 68       	ori	r24, 0x80	; 128
 696:	86 bf       	out	0x36, r24	; 54
		}break;
 698:	76 c1       	rjmp	.+748    	; 0x986 <__vector_17+0x382>
		case SLA_W_NACK:
		{
			//reset s_remainingData and s_data value
			s_remainingData = s_numOfData - 1;
 69a:	80 91 66 00 	lds	r24, 0x0066
 69e:	81 50       	subi	r24, 0x01	; 1
 6a0:	80 93 68 00 	sts	0x0068, r24
			s_data = s_payLoad[0];
 6a4:	80 91 7f 00 	lds	r24, 0x007F
 6a8:	80 93 69 00 	sts	0x0069, r24
			s_retries++;
 6ac:	80 91 64 00 	lds	r24, 0x0064
 6b0:	8f 5f       	subi	r24, 0xFF	; 255
 6b2:	80 93 64 00 	sts	0x0064, r24
			if(s_retries > MAX_NUMBER_OF_RETRIES)
 6b6:	80 91 64 00 	lds	r24, 0x0064
 6ba:	85 36       	cpi	r24, 0x65	; 101
 6bc:	40 f0       	brcs	.+16     	; 0x6ce <__vector_17+0xca>
			{
				//send STOP condition and go idle
				i2c_resetStatus();
 6be:	08 df       	rcall	.-496    	; 0x4d0 <i2c_resetStatus>
				TWCR |= (1<<TWSTO);
 6c0:	86 b7       	in	r24, 0x36	; 54
 6c2:	80 61       	ori	r24, 0x10	; 16
 6c4:	86 bf       	out	0x36, r24	; 54
				TWCR |= (1<<TWINT);
 6c6:	86 b7       	in	r24, 0x36	; 54
 6c8:	80 68       	ori	r24, 0x80	; 128
 6ca:	86 bf       	out	0x36, r24	; 54
 6cc:	5c c1       	rjmp	.+696    	; 0x986 <__vector_17+0x382>
			}
			else
			{
				TWCR |= (1<<TWSTA);
 6ce:	86 b7       	in	r24, 0x36	; 54
 6d0:	80 62       	ori	r24, 0x20	; 32
 6d2:	86 bf       	out	0x36, r24	; 54
				TWCR |= (1<<TWINT);
 6d4:	86 b7       	in	r24, 0x36	; 54
 6d6:	80 68       	ori	r24, 0x80	; 128
 6d8:	86 bf       	out	0x36, r24	; 54
 6da:	55 c1       	rjmp	.+682    	; 0x986 <__vector_17+0x382>
			}
		}break;
		case DATA_TRANSMITTED_ACK:
		{
			//command has just been sent and now it's time to restart the comm line
			if(s_isCmdSent == 0)
 6dc:	80 91 63 00 	lds	r24, 0x0063
 6e0:	81 11       	cpse	r24, r1
 6e2:	0a c0       	rjmp	.+20     	; 0x6f8 <__vector_17+0xf4>
			{
				s_isCmdSent = 1;
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	80 93 63 00 	sts	0x0063, r24
				TWCR |= (1<<TWSTA);
 6ea:	86 b7       	in	r24, 0x36	; 54
 6ec:	80 62       	ori	r24, 0x20	; 32
 6ee:	86 bf       	out	0x36, r24	; 54
				TWCR |= (1<<TWINT);
 6f0:	86 b7       	in	r24, 0x36	; 54
 6f2:	80 68       	ori	r24, 0x80	; 128
 6f4:	86 bf       	out	0x36, r24	; 54
 6f6:	47 c1       	rjmp	.+654    	; 0x986 <__vector_17+0x382>
			}
			//restart has been done and now it's time to sent the payload
			else
			{
				if (s_remainingData == 0)
 6f8:	80 91 68 00 	lds	r24, 0x0068
 6fc:	81 11       	cpse	r24, r1
 6fe:	08 c0       	rjmp	.+16     	; 0x710 <__vector_17+0x10c>
				{
					//End transmission
					i2c_resetStatus();
 700:	e7 de       	rcall	.-562    	; 0x4d0 <i2c_resetStatus>
					TWCR |= (1<<TWSTO);
 702:	86 b7       	in	r24, 0x36	; 54
 704:	80 61       	ori	r24, 0x10	; 16
 706:	86 bf       	out	0x36, r24	; 54
					TWCR |= (1<<TWINT);
 708:	86 b7       	in	r24, 0x36	; 54
 70a:	80 68       	ori	r24, 0x80	; 128
 70c:	86 bf       	out	0x36, r24	; 54
 70e:	3b c1       	rjmp	.+630    	; 0x986 <__vector_17+0x382>
				}
				else
				{
					s_data = s_payLoad[s_numOfData-s_remainingData];
 710:	e0 91 66 00 	lds	r30, 0x0066
 714:	80 91 68 00 	lds	r24, 0x0068
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	e8 1b       	sub	r30, r24
 71c:	f1 09       	sbc	r31, r1
 71e:	e1 58       	subi	r30, 0x81	; 129
 720:	ff 4f       	sbci	r31, 0xFF	; 255
 722:	80 81       	ld	r24, Z
 724:	80 93 69 00 	sts	0x0069, r24
					s_remainingData--;
 728:	80 91 68 00 	lds	r24, 0x0068
 72c:	81 50       	subi	r24, 0x01	; 1
 72e:	80 93 68 00 	sts	0x0068, r24
					TWDR = s_data;
 732:	80 91 69 00 	lds	r24, 0x0069
 736:	83 b9       	out	0x03, r24	; 3
					TWCR |= (1<<TWINT);
 738:	86 b7       	in	r24, 0x36	; 54
 73a:	80 68       	ori	r24, 0x80	; 128
 73c:	86 bf       	out	0x36, r24	; 54
 73e:	23 c1       	rjmp	.+582    	; 0x986 <__vector_17+0x382>
			}
		}break;
		case DATA_TRANSMITTED_NACK:
		{
			//End transmission
			i2c_resetStatus();
 740:	c7 de       	rcall	.-626    	; 0x4d0 <i2c_resetStatus>
			TWCR |= (1<<TWSTO);
 742:	86 b7       	in	r24, 0x36	; 54
 744:	80 61       	ori	r24, 0x10	; 16
 746:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 748:	86 b7       	in	r24, 0x36	; 54
 74a:	80 68       	ori	r24, 0x80	; 128
 74c:	86 bf       	out	0x36, r24	; 54
		}break;
 74e:	1b c1       	rjmp	.+566    	; 0x986 <__vector_17+0x382>
		case ABR_LOST:
		{
			TWCR |= (1<<TWEA);
 750:	86 b7       	in	r24, 0x36	; 54
 752:	80 64       	ori	r24, 0x40	; 64
 754:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 756:	86 b7       	in	r24, 0x36	; 54
 758:	80 68       	ori	r24, 0x80	; 128
 75a:	86 bf       	out	0x36, r24	; 54
		}break;
 75c:	14 c1       	rjmp	.+552    	; 0x986 <__vector_17+0x382>
//==================================MASTER RECEIVER MODE=======================================
		case SLA_R_ACK:
		{	
			//data will be received and ACK must be given
			TWCR |= (1<<TWEA);
 75e:	86 b7       	in	r24, 0x36	; 54
 760:	80 64       	ori	r24, 0x40	; 64
 762:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 764:	86 b7       	in	r24, 0x36	; 54
 766:	80 68       	ori	r24, 0x80	; 128
 768:	86 bf       	out	0x36, r24	; 54
		}break;
 76a:	0d c1       	rjmp	.+538    	; 0x986 <__vector_17+0x382>
		case SLA_R_NACK:
		{
			//reset the s_remainingData counter and restart the transmission
			s_remainingData = s_numOfData - 1;
 76c:	80 91 66 00 	lds	r24, 0x0066
 770:	81 50       	subi	r24, 0x01	; 1
 772:	80 93 68 00 	sts	0x0068, r24
			s_retries++;
 776:	80 91 64 00 	lds	r24, 0x0064
 77a:	8f 5f       	subi	r24, 0xFF	; 255
 77c:	80 93 64 00 	sts	0x0064, r24
			if(s_retries > MAX_NUMBER_OF_RETRIES)
 780:	80 91 64 00 	lds	r24, 0x0064
 784:	85 36       	cpi	r24, 0x65	; 101
 786:	40 f0       	brcs	.+16     	; 0x798 <__vector_17+0x194>
			{
				//send STOP condition and go idle
				i2c_resetStatus();
 788:	a3 de       	rcall	.-698    	; 0x4d0 <i2c_resetStatus>
				TWCR |= (1<<TWSTO);
 78a:	86 b7       	in	r24, 0x36	; 54
 78c:	80 61       	ori	r24, 0x10	; 16
 78e:	86 bf       	out	0x36, r24	; 54
				TWCR |= (1<<TWINT);
 790:	86 b7       	in	r24, 0x36	; 54
 792:	80 68       	ori	r24, 0x80	; 128
 794:	86 bf       	out	0x36, r24	; 54
 796:	f7 c0       	rjmp	.+494    	; 0x986 <__vector_17+0x382>
			}
			else
			{
				TWCR |= (1<<TWSTA);
 798:	86 b7       	in	r24, 0x36	; 54
 79a:	80 62       	ori	r24, 0x20	; 32
 79c:	86 bf       	out	0x36, r24	; 54
				TWCR |= (1<<TWINT);
 79e:	86 b7       	in	r24, 0x36	; 54
 7a0:	80 68       	ori	r24, 0x80	; 128
 7a2:	86 bf       	out	0x36, r24	; 54
 7a4:	f0 c0       	rjmp	.+480    	; 0x986 <__vector_17+0x382>
			}
		}break;
		case DATA_RECEIVED_ACK:
		{
			//if there's more data to be received try to do so (ACK must be given)
			if(s_remainingData > 1)
 7a6:	80 91 68 00 	lds	r24, 0x0068
 7aa:	82 30       	cpi	r24, 0x02	; 2
 7ac:	b8 f0       	brcs	.+46     	; 0x7dc <__vector_17+0x1d8>
			{
				s_payLoad[s_numOfData-s_remainingData] = TWDR;
 7ae:	e0 91 66 00 	lds	r30, 0x0066
 7b2:	80 91 68 00 	lds	r24, 0x0068
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	e8 1b       	sub	r30, r24
 7ba:	f1 09       	sbc	r31, r1
 7bc:	83 b1       	in	r24, 0x03	; 3
 7be:	e1 58       	subi	r30, 0x81	; 129
 7c0:	ff 4f       	sbci	r31, 0xFF	; 255
 7c2:	80 83       	st	Z, r24
				s_remainingData--;
 7c4:	80 91 68 00 	lds	r24, 0x0068
 7c8:	81 50       	subi	r24, 0x01	; 1
 7ca:	80 93 68 00 	sts	0x0068, r24
				TWCR |= (1<<TWEA);
 7ce:	86 b7       	in	r24, 0x36	; 54
 7d0:	80 64       	ori	r24, 0x40	; 64
 7d2:	86 bf       	out	0x36, r24	; 54
				TWCR |= (1<<TWINT);
 7d4:	86 b7       	in	r24, 0x36	; 54
 7d6:	80 68       	ori	r24, 0x80	; 128
 7d8:	86 bf       	out	0x36, r24	; 54
 7da:	d5 c0       	rjmp	.+426    	; 0x986 <__vector_17+0x382>
			}
			else if(s_remainingData == 1)
 7dc:	80 91 68 00 	lds	r24, 0x0068
 7e0:	81 30       	cpi	r24, 0x01	; 1
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <__vector_17+0x1e2>
 7e4:	d0 c0       	rjmp	.+416    	; 0x986 <__vector_17+0x382>
			{
				s_payLoad[s_numOfData-s_remainingData] = TWDR;
 7e6:	e0 91 66 00 	lds	r30, 0x0066
 7ea:	80 91 68 00 	lds	r24, 0x0068
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	e8 1b       	sub	r30, r24
 7f2:	f1 09       	sbc	r31, r1
 7f4:	83 b1       	in	r24, 0x03	; 3
 7f6:	e1 58       	subi	r30, 0x81	; 129
 7f8:	ff 4f       	sbci	r31, 0xFF	; 255
 7fa:	80 83       	st	Z, r24
				s_remainingData--;
 7fc:	80 91 68 00 	lds	r24, 0x0068
 800:	81 50       	subi	r24, 0x01	; 1
 802:	80 93 68 00 	sts	0x0068, r24
				TWCR &= ~(1<<TWEA);
 806:	86 b7       	in	r24, 0x36	; 54
 808:	8f 7b       	andi	r24, 0xBF	; 191
 80a:	86 bf       	out	0x36, r24	; 54
				TWCR |= (1<<TWINT);
 80c:	86 b7       	in	r24, 0x36	; 54
 80e:	80 68       	ori	r24, 0x80	; 128
 810:	86 bf       	out	0x36, r24	; 54
 812:	b9 c0       	rjmp	.+370    	; 0x986 <__vector_17+0x382>
			}
		}break;
		case DATA_RECEIVED_NACK:
		{
			s_payLoad[s_numOfData-s_remainingData] = TWDR;
 814:	e0 91 66 00 	lds	r30, 0x0066
 818:	80 91 68 00 	lds	r24, 0x0068
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	e8 1b       	sub	r30, r24
 820:	f1 09       	sbc	r31, r1
 822:	83 b1       	in	r24, 0x03	; 3
 824:	e1 58       	subi	r30, 0x81	; 129
 826:	ff 4f       	sbci	r31, 0xFF	; 255
 828:	80 83       	st	Z, r24
			//end transmission
			i2c_saveData();
 82a:	6b de       	rcall	.-810    	; 0x502 <i2c_saveData>
			i2c_resetStatus();
 82c:	51 de       	rcall	.-862    	; 0x4d0 <i2c_resetStatus>
			TWCR |= (1<<TWSTO);
 82e:	86 b7       	in	r24, 0x36	; 54
 830:	80 61       	ori	r24, 0x10	; 16
 832:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 834:	86 b7       	in	r24, 0x36	; 54
 836:	80 68       	ori	r24, 0x80	; 128
 838:	86 bf       	out	0x36, r24	; 54
		}break;
 83a:	a5 c0       	rjmp	.+330    	; 0x986 <__vector_17+0x382>
		case AS_SLAVE_OWN_SLA_W_RECEIVED:
		{
			//data byte will be received and ACK will be returned
			//this is in order for the master to initiate restart and send the command byte
			//the sequence number -1 is the command byte, s_cmd == 0 means there's no command yet
			if (s_cmd == 0) s_dataSeqNumber = -1;
 83c:	80 91 65 00 	lds	r24, 0x0065
 840:	81 11       	cpse	r24, r1
 842:	03 c0       	rjmp	.+6      	; 0x84a <__vector_17+0x246>
 844:	8f ef       	ldi	r24, 0xFF	; 255
 846:	80 93 62 00 	sts	0x0062, r24
			TWCR |= (1<<TWEA);
 84a:	86 b7       	in	r24, 0x36	; 54
 84c:	80 64       	ori	r24, 0x40	; 64
 84e:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 850:	86 b7       	in	r24, 0x36	; 54
 852:	80 68       	ori	r24, 0x80	; 128
 854:	86 bf       	out	0x36, r24	; 54
		}break;
 856:	97 c0       	rjmp	.+302    	; 0x986 <__vector_17+0x382>
		case AS_SLAVE_ABR_LOST_ON_SLA_W:
		{
			//data byte will be received and NOT ACK will be returned
			TWCR |= (1<<TWEA);
 858:	86 b7       	in	r24, 0x36	; 54
 85a:	80 64       	ori	r24, 0x40	; 64
 85c:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 85e:	86 b7       	in	r24, 0x36	; 54
 860:	80 68       	ori	r24, 0x80	; 128
 862:	86 bf       	out	0x36, r24	; 54
		}break;
 864:	90 c0       	rjmp	.+288    	; 0x986 <__vector_17+0x382>
		case AS_SLAVE_GENERAL_CALL_RECEIVED:
		{
			//data byte will be received and NOT ACK will be returned
			//disable general call for now !!TODO Later!!
			TWCR |= (1<<TWEA);
 866:	86 b7       	in	r24, 0x36	; 54
 868:	80 64       	ori	r24, 0x40	; 64
 86a:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 86c:	86 b7       	in	r24, 0x36	; 54
 86e:	80 68       	ori	r24, 0x80	; 128
 870:	86 bf       	out	0x36, r24	; 54
		}break;
 872:	89 c0       	rjmp	.+274    	; 0x986 <__vector_17+0x382>
		case AS_SLAVE_DATA_RECEIVED_ACK:
		{
			if(s_dataSeqNumber == -1)
 874:	80 91 62 00 	lds	r24, 0x0062
 878:	8f 3f       	cpi	r24, 0xFF	; 255
 87a:	41 f4       	brne	.+16     	; 0x88c <__vector_17+0x288>
			{
				s_cmd =TWDR;
 87c:	83 b1       	in	r24, 0x03	; 3
 87e:	80 93 65 00 	sts	0x0065, r24
				i2c_processCommand(s_cmd);
 882:	80 91 65 00 	lds	r24, 0x0065
				s_dataSeqNumber = 0;
 886:	10 92 62 00 	sts	0x0062, r1
 88a:	0e c0       	rjmp	.+28     	; 0x8a8 <__vector_17+0x2a4>
			}
			else
			{
				s_payLoad[s_dataSeqNumber] = TWDR;
 88c:	e0 91 62 00 	lds	r30, 0x0062
 890:	0e 2e       	mov	r0, r30
 892:	00 0c       	add	r0, r0
 894:	ff 0b       	sbc	r31, r31
 896:	83 b1       	in	r24, 0x03	; 3
 898:	e1 58       	subi	r30, 0x81	; 129
 89a:	ff 4f       	sbci	r31, 0xFF	; 255
 89c:	80 83       	st	Z, r24
				s_dataSeqNumber++;
 89e:	80 91 62 00 	lds	r24, 0x0062
 8a2:	8f 5f       	subi	r24, 0xFF	; 255
 8a4:	80 93 62 00 	sts	0x0062, r24
			}
			TWCR |= (1<<TWEA);
 8a8:	86 b7       	in	r24, 0x36	; 54
 8aa:	80 64       	ori	r24, 0x40	; 64
 8ac:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 8ae:	86 b7       	in	r24, 0x36	; 54
 8b0:	80 68       	ori	r24, 0x80	; 128
 8b2:	86 bf       	out	0x36, r24	; 54
		}break;
 8b4:	68 c0       	rjmp	.+208    	; 0x986 <__vector_17+0x382>
		case AS_SLAVE_DATA_RECEIVED_NACK:
		{
			//end transmission
			i2c_saveData();
 8b6:	25 de       	rcall	.-950    	; 0x502 <i2c_saveData>
			i2c_resetStatus();	
 8b8:	0b de       	rcall	.-1002   	; 0x4d0 <i2c_resetStatus>
			TWCR |= (1<<TWEA);
 8ba:	86 b7       	in	r24, 0x36	; 54
 8bc:	80 64       	ori	r24, 0x40	; 64
 8be:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 8c0:	86 b7       	in	r24, 0x36	; 54
 8c2:	80 68       	ori	r24, 0x80	; 128
 8c4:	86 bf       	out	0x36, r24	; 54
		}break;
 8c6:	5f c0       	rjmp	.+190    	; 0x986 <__vector_17+0x382>
		case AS_SLAVE_DATA_RECEIVED_GEN_CALL_ACK:
		{
			//try to receive more data
			TWCR |= (1<<TWEA);
 8c8:	86 b7       	in	r24, 0x36	; 54
 8ca:	80 64       	ori	r24, 0x40	; 64
 8cc:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 8ce:	86 b7       	in	r24, 0x36	; 54
 8d0:	80 68       	ori	r24, 0x80	; 128
 8d2:	86 bf       	out	0x36, r24	; 54
		}break;
 8d4:	58 c0       	rjmp	.+176    	; 0x986 <__vector_17+0x382>
		case AS_SLAVE_DATA_RECEIVED_GEN_CALL_NACK:
		{
			i2c_resetStatus();
 8d6:	fc dd       	rcall	.-1032   	; 0x4d0 <i2c_resetStatus>
			TWCR |= (1<<TWEA);
 8d8:	86 b7       	in	r24, 0x36	; 54
 8da:	80 64       	ori	r24, 0x40	; 64
 8dc:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 8de:	86 b7       	in	r24, 0x36	; 54
 8e0:	80 68       	ori	r24, 0x80	; 128
 8e2:	86 bf       	out	0x36, r24	; 54
		}break;
 8e4:	50 c0       	rjmp	.+160    	; 0x986 <__vector_17+0x382>
		case AS_SLAVE_STOP_COND_RECEIVED:
		{
			//below means the command is not just been received, for if it is then s_dataSeqNumber will be 0
			if(s_dataSeqNumber != 0)
 8e6:	80 91 62 00 	lds	r24, 0x0062
 8ea:	88 23       	and	r24, r24
 8ec:	11 f0       	breq	.+4      	; 0x8f2 <__vector_17+0x2ee>
			{
				i2c_saveData();
 8ee:	09 de       	rcall	.-1006   	; 0x502 <i2c_saveData>
				i2c_resetStatus();
 8f0:	ef dd       	rcall	.-1058   	; 0x4d0 <i2c_resetStatus>
			}
			TWCR |= (1<<TWEA);
 8f2:	86 b7       	in	r24, 0x36	; 54
 8f4:	80 64       	ori	r24, 0x40	; 64
 8f6:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 8f8:	86 b7       	in	r24, 0x36	; 54
 8fa:	80 68       	ori	r24, 0x80	; 128
 8fc:	86 bf       	out	0x36, r24	; 54
		}break;
 8fe:	43 c0       	rjmp	.+134    	; 0x986 <__vector_17+0x382>
//==================================SLAVE TRANSMITTER MODE=======================================
		case AS_SLAVE_SLA_R_RECEIVED_ACK:
		{
			//prepare the data and send it to the master
			s_dataSeqNumber = 0;
 900:	10 92 62 00 	sts	0x0062, r1
			TWDR = s_payLoad[s_dataSeqNumber];
 904:	e0 91 62 00 	lds	r30, 0x0062
 908:	0e 2e       	mov	r0, r30
 90a:	00 0c       	add	r0, r0
 90c:	ff 0b       	sbc	r31, r31
 90e:	e1 58       	subi	r30, 0x81	; 129
 910:	ff 4f       	sbci	r31, 0xFF	; 255
 912:	80 81       	ld	r24, Z
 914:	83 b9       	out	0x03, r24	; 3
			s_dataSeqNumber++;
 916:	80 91 62 00 	lds	r24, 0x0062
 91a:	8f 5f       	subi	r24, 0xFF	; 255
 91c:	80 93 62 00 	sts	0x0062, r24
			TWCR |= (1<<TWEA);
 920:	86 b7       	in	r24, 0x36	; 54
 922:	80 64       	ori	r24, 0x40	; 64
 924:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 926:	86 b7       	in	r24, 0x36	; 54
 928:	80 68       	ori	r24, 0x80	; 128
 92a:	86 bf       	out	0x36, r24	; 54
		}break;
 92c:	2c c0       	rjmp	.+88     	; 0x986 <__vector_17+0x382>
		case AS_SLAVE_ABR_LOST_ON_SLA_R:
		{
			//stop transmission
			i2c_resetStatus();
 92e:	d0 dd       	rcall	.-1120   	; 0x4d0 <i2c_resetStatus>
			TWCR |= (1<<TWEA);
 930:	86 b7       	in	r24, 0x36	; 54
 932:	80 64       	ori	r24, 0x40	; 64
 934:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 936:	86 b7       	in	r24, 0x36	; 54
 938:	80 68       	ori	r24, 0x80	; 128
 93a:	86 bf       	out	0x36, r24	; 54
		}break;
 93c:	24 c0       	rjmp	.+72     	; 0x986 <__vector_17+0x382>
		case AS_SLAVE_DATA_TRANSMITTED_ACK:
		{
			//send more data as long as master doesn't end the transmission
			TWDR = s_payLoad[s_dataSeqNumber];
 93e:	e0 91 62 00 	lds	r30, 0x0062
 942:	0e 2e       	mov	r0, r30
 944:	00 0c       	add	r0, r0
 946:	ff 0b       	sbc	r31, r31
 948:	e1 58       	subi	r30, 0x81	; 129
 94a:	ff 4f       	sbci	r31, 0xFF	; 255
 94c:	80 81       	ld	r24, Z
 94e:	83 b9       	out	0x03, r24	; 3
			s_dataSeqNumber++;
 950:	80 91 62 00 	lds	r24, 0x0062
 954:	8f 5f       	subi	r24, 0xFF	; 255
 956:	80 93 62 00 	sts	0x0062, r24
			TWCR |= (1<<TWEA);
 95a:	86 b7       	in	r24, 0x36	; 54
 95c:	80 64       	ori	r24, 0x40	; 64
 95e:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 960:	86 b7       	in	r24, 0x36	; 54
 962:	80 68       	ori	r24, 0x80	; 128
 964:	86 bf       	out	0x36, r24	; 54
		}break;
 966:	0f c0       	rjmp	.+30     	; 0x986 <__vector_17+0x382>
		case AS_SLAVE_DATA_TRANSMITTED_NACK:
		{
			//end transmission
			i2c_resetStatus();
 968:	b3 dd       	rcall	.-1178   	; 0x4d0 <i2c_resetStatus>
			TWCR |= (1<<TWEA);
 96a:	86 b7       	in	r24, 0x36	; 54
 96c:	80 64       	ori	r24, 0x40	; 64
 96e:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 970:	86 b7       	in	r24, 0x36	; 54
 972:	80 68       	ori	r24, 0x80	; 128
 974:	86 bf       	out	0x36, r24	; 54
		}break;
 976:	07 c0       	rjmp	.+14     	; 0x986 <__vector_17+0x382>
		case AS_SLAVE_LAST_DATA_BYTE_TRANSMITTED_ACK:
		{
			//end transmission
			i2c_resetStatus();
 978:	ab dd       	rcall	.-1194   	; 0x4d0 <i2c_resetStatus>
			TWCR |= (1<<TWEA);
 97a:	86 b7       	in	r24, 0x36	; 54
 97c:	80 64       	ori	r24, 0x40	; 64
 97e:	86 bf       	out	0x36, r24	; 54
			TWCR |= (1<<TWINT);
 980:	86 b7       	in	r24, 0x36	; 54
 982:	80 68       	ori	r24, 0x80	; 128
 984:	86 bf       	out	0x36, r24	; 54
		}break;
	}
}
 986:	ff 91       	pop	r31
 988:	ef 91       	pop	r30
 98a:	bf 91       	pop	r27
 98c:	af 91       	pop	r26
 98e:	9f 91       	pop	r25
 990:	8f 91       	pop	r24
 992:	7f 91       	pop	r23
 994:	6f 91       	pop	r22
 996:	5f 91       	pop	r21
 998:	4f 91       	pop	r20
 99a:	3f 91       	pop	r19
 99c:	2f 91       	pop	r18
 99e:	0f 90       	pop	r0
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	0f 90       	pop	r0
 9a4:	1f 90       	pop	r1
 9a6:	18 95       	reti

000009a8 <__vector_9>:
{
	
}

ISR(TIMER0_OVF_vect)
{
 9a8:	1f 92       	push	r1
 9aa:	0f 92       	push	r0
 9ac:	0f b6       	in	r0, 0x3f	; 63
 9ae:	0f 92       	push	r0
 9b0:	11 24       	eor	r1, r1
 9b2:	2f 93       	push	r18
 9b4:	3f 93       	push	r19
 9b6:	4f 93       	push	r20
 9b8:	5f 93       	push	r21
 9ba:	6f 93       	push	r22
 9bc:	7f 93       	push	r23
 9be:	8f 93       	push	r24
 9c0:	9f 93       	push	r25
 9c2:	af 93       	push	r26
 9c4:	bf 93       	push	r27
 9c6:	ef 93       	push	r30
 9c8:	ff 93       	push	r31
	i2c_prepComm(0x51,SEND_MEASUREMENT_DATA,0,sizeof(data.sensorFreqVal));
 9ca:	24 e0       	ldi	r18, 0x04	; 4
 9cc:	40 e0       	ldi	r20, 0x00	; 0
 9ce:	50 e0       	ldi	r21, 0x00	; 0
 9d0:	61 e0       	ldi	r22, 0x01	; 1
 9d2:	81 e5       	ldi	r24, 0x51	; 81
 9d4:	f7 dd       	rcall	.-1042   	; 0x5c4 <i2c_prepComm>
	i2c_start();
 9d6:	75 dd       	rcall	.-1302   	; 0x4c2 <i2c_start>
	while(s_isI2CBusy);
 9d8:	80 91 67 00 	lds	r24, 0x0067
 9dc:	81 11       	cpse	r24, r1
 9de:	fc cf       	rjmp	.-8      	; 0x9d8 <__vector_9+0x30>
	data.sensorFreqVal = *((uint32_t *) s_dataStorage);
 9e0:	80 91 6d 00 	lds	r24, 0x006D
 9e4:	90 91 6e 00 	lds	r25, 0x006E
 9e8:	a0 91 6f 00 	lds	r26, 0x006F
 9ec:	b0 91 70 00 	lds	r27, 0x0070
 9f0:	80 93 76 00 	sts	0x0076, r24
 9f4:	90 93 77 00 	sts	0x0077, r25
 9f8:	a0 93 78 00 	sts	0x0078, r26
 9fc:	b0 93 79 00 	sts	0x0079, r27
	i2c_prepComm(0x52,SEND_MEASUREMENT_DATA,0,sizeof(data.refFreqVal));
 a00:	24 e0       	ldi	r18, 0x04	; 4
 a02:	40 e0       	ldi	r20, 0x00	; 0
 a04:	50 e0       	ldi	r21, 0x00	; 0
 a06:	61 e0       	ldi	r22, 0x01	; 1
 a08:	82 e5       	ldi	r24, 0x52	; 82
 a0a:	dc dd       	rcall	.-1096   	; 0x5c4 <i2c_prepComm>
	i2c_start();
 a0c:	5a dd       	rcall	.-1356   	; 0x4c2 <i2c_start>
	while(s_isI2CBusy);
 a0e:	80 91 67 00 	lds	r24, 0x0067
 a12:	81 11       	cpse	r24, r1
 a14:	fc cf       	rjmp	.-8      	; 0xa0e <__vector_9+0x66>
	data.refFreqVal = *((uint32_t *) s_dataStorage);
 a16:	80 91 6d 00 	lds	r24, 0x006D
 a1a:	90 91 6e 00 	lds	r25, 0x006E
 a1e:	a0 91 6f 00 	lds	r26, 0x006F
 a22:	b0 91 70 00 	lds	r27, 0x0070
 a26:	80 93 7a 00 	sts	0x007A, r24
 a2a:	90 93 7b 00 	sts	0x007B, r25
 a2e:	a0 93 7c 00 	sts	0x007C, r26
 a32:	b0 93 7d 00 	sts	0x007D, r27
	i2c_prepComm(0x52,SEND_THERMAL_DATA,0,sizeof(data.tempVal));
 a36:	21 e0       	ldi	r18, 0x01	; 1
 a38:	40 e0       	ldi	r20, 0x00	; 0
 a3a:	50 e0       	ldi	r21, 0x00	; 0
 a3c:	62 e0       	ldi	r22, 0x02	; 2
 a3e:	82 e5       	ldi	r24, 0x52	; 82
 a40:	c1 dd       	rcall	.-1150   	; 0x5c4 <i2c_prepComm>
	i2c_start();
 a42:	3f dd       	rcall	.-1410   	; 0x4c2 <i2c_start>
	while(s_isI2CBusy);
 a44:	80 91 67 00 	lds	r24, 0x0067
 a48:	81 11       	cpse	r24, r1
 a4a:	fc cf       	rjmp	.-8      	; 0xa44 <__vector_9+0x9c>
	data.tempVal = *((uint8_t *) s_dataStorage);
 a4c:	80 91 6d 00 	lds	r24, 0x006D
 a50:	80 93 7e 00 	sts	0x007E, r24
	//TODO: reset the timer!!
}
 a54:	ff 91       	pop	r31
 a56:	ef 91       	pop	r30
 a58:	bf 91       	pop	r27
 a5a:	af 91       	pop	r26
 a5c:	9f 91       	pop	r25
 a5e:	8f 91       	pop	r24
 a60:	7f 91       	pop	r23
 a62:	6f 91       	pop	r22
 a64:	5f 91       	pop	r21
 a66:	4f 91       	pop	r20
 a68:	3f 91       	pop	r19
 a6a:	2f 91       	pop	r18
 a6c:	0f 90       	pop	r0
 a6e:	0f be       	out	0x3f, r0	; 63
 a70:	0f 90       	pop	r0
 a72:	1f 90       	pop	r1
 a74:	18 95       	reti

00000a76 <main>:

int main(void)
{
	uint8_t i = 0;
	sei();
 a76:	78 94       	sei
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 a78:	9e e0       	ldi	r25, 0x0E	; 14
 a7a:	88 e1       	ldi	r24, 0x18	; 24
 a7c:	0f b6       	in	r0, 0x3f	; 63
 a7e:	f8 94       	cli
 a80:	a8 95       	wdr
 a82:	81 bd       	out	0x21, r24	; 33
 a84:	0f be       	out	0x3f, r0	; 63
 a86:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_1S);
	usbInit();
 a88:	15 d1       	rcall	.+554    	; 0xcb4 <usbInit>
	usbDeviceDisconnect();
 a8a:	8b 9a       	sbi	0x11, 3	; 17
 a8c:	8a ef       	ldi	r24, 0xFA	; 250
	for (i=0;i<250;++i)
	{
		wdt_reset();
 a8e:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a90:	ef e6       	ldi	r30, 0x6F	; 111
 a92:	f7 e1       	ldi	r31, 0x17	; 23
 a94:	31 97       	sbiw	r30, 0x01	; 1
 a96:	f1 f7       	brne	.-4      	; 0xa94 <main+0x1e>
 a98:	00 c0       	rjmp	.+0      	; 0xa9a <main+0x24>
 a9a:	00 00       	nop
 a9c:	81 50       	subi	r24, 0x01	; 1
	uint8_t i = 0;
	sei();
	wdt_enable(WDTO_1S);
	usbInit();
	usbDeviceDisconnect();
	for (i=0;i<250;++i)
 a9e:	b9 f7       	brne	.-18     	; 0xa8e <main+0x18>
	{
		wdt_reset();
		_delay_ms(2);
	}
	usbDeviceConnect();
 aa0:	8b 98       	cbi	0x11, 3	; 17
	
    while (1) 
    {
		wdt_reset();
 aa2:	a8 95       	wdr
		usbPoll();
 aa4:	01 d0       	rcall	.+2      	; 0xaa8 <usbPoll>
    }
 aa6:	fd cf       	rjmp	.-6      	; 0xaa2 <main+0x2c>

00000aa8 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 aa8:	cf 93       	push	r28
 aaa:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 aac:	80 91 98 00 	lds	r24, 0x0098
 ab0:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 ab2:	0a f4       	brpl	.+2      	; 0xab6 <usbPoll+0xe>
 ab4:	99 c0       	rjmp	.+306    	; 0xbe8 <usbPoll+0x140>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 ab6:	20 91 95 00 	lds	r18, 0x0095
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 aba:	90 91 94 00 	lds	r25, 0x0094
 abe:	9d 32       	cpi	r25, 0x2D	; 45
 ac0:	09 f0       	breq	.+2      	; 0xac4 <usbPoll+0x1c>
 ac2:	90 c0       	rjmp	.+288    	; 0xbe4 <usbPoll+0x13c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 ac4:	88 30       	cpi	r24, 0x08	; 8
 ac6:	09 f0       	breq	.+2      	; 0xaca <usbPoll+0x22>
 ac8:	8d c0       	rjmp	.+282    	; 0xbe4 <usbPoll+0x13c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 aca:	cc e0       	ldi	r28, 0x0C	; 12
 acc:	d0 e0       	ldi	r29, 0x00	; 0
 ace:	c2 1b       	sub	r28, r18
 ad0:	d1 09       	sbc	r29, r1
 ad2:	c4 56       	subi	r28, 0x64	; 100
 ad4:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 ad6:	83 ec       	ldi	r24, 0xC3	; 195
 ad8:	80 93 88 00 	sts	0x0088, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 adc:	8a e5       	ldi	r24, 0x5A	; 90
 ade:	80 93 61 00 	sts	0x0061, r24
        usbMsgFlags = 0;
 ae2:	10 92 6b 00 	sts	0x006B, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 ae6:	88 81       	ld	r24, Y
 ae8:	98 2f       	mov	r25, r24
 aea:	90 76       	andi	r25, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 aec:	19 f0       	breq	.+6      	; 0xaf4 <usbPoll+0x4c>
            replyLen = usbFunctionSetup(data);
 aee:	ce 01       	movw	r24, r28
 af0:	17 dd       	rcall	.-1490   	; 0x520 <usbFunctionSetup>
 af2:	6f c0       	rjmp	.+222    	; 0xbd2 <usbPoll+0x12a>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 af4:	2a 81       	ldd	r18, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 af6:	10 92 91 00 	sts	0x0091, r1
    SWITCH_START(rq->bRequest)
 afa:	99 81       	ldd	r25, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 afc:	91 11       	cpse	r25, r1
 afe:	0b c0       	rjmp	.+22     	; 0xb16 <usbPoll+0x6e>
        uchar recipient = rq->bmRequestType & USBRQ_RCPT_MASK;  /* assign arith ops to variables to enforce byte size */
 b00:	8f 71       	andi	r24, 0x1F	; 31
        if(USB_CFG_IS_SELF_POWERED && recipient == USBRQ_RCPT_DEVICE)
 b02:	19 f4       	brne	.+6      	; 0xb0a <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	80 93 91 00 	sts	0x0091, r24
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 b0a:	10 92 92 00 	sts	0x0092, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 b0e:	21 e9       	ldi	r18, 0x91	; 145
 b10:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 b12:	82 e0       	ldi	r24, 0x02	; 2
 b14:	5a c0       	rjmp	.+180    	; 0xbca <usbPoll+0x122>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 b16:	95 30       	cpi	r25, 0x05	; 5
 b18:	31 f4       	brne	.+12     	; 0xb26 <usbPoll+0x7e>
        usbNewDeviceAddr = value;
 b1a:	20 93 99 00 	sts	0x0099, r18
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 b1e:	21 e9       	ldi	r18, 0x91	; 145
 b20:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 b22:	80 e0       	ldi	r24, 0x00	; 0
 b24:	52 c0       	rjmp	.+164    	; 0xbca <usbPoll+0x122>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 b26:	96 30       	cpi	r25, 0x06	; 6
 b28:	e1 f5       	brne	.+120    	; 0xba2 <usbPoll+0xfa>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 b2c:	81 30       	cpi	r24, 0x01	; 1
 b2e:	41 f4       	brne	.+16     	; 0xb40 <usbPoll+0x98>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 b30:	8a eb       	ldi	r24, 0xBA	; 186
 b32:	91 e0       	ldi	r25, 0x01	; 1
 b34:	90 93 97 00 	sts	0x0097, r25
 b38:	80 93 96 00 	sts	0x0096, r24
 b3c:	82 e1       	ldi	r24, 0x12	; 18
 b3e:	2d c0       	rjmp	.+90     	; 0xb9a <usbPoll+0xf2>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 b40:	82 30       	cpi	r24, 0x02	; 2
 b42:	41 f4       	brne	.+16     	; 0xb54 <usbPoll+0xac>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 b44:	88 ea       	ldi	r24, 0xA8	; 168
 b46:	91 e0       	ldi	r25, 0x01	; 1
 b48:	90 93 97 00 	sts	0x0097, r25
 b4c:	80 93 96 00 	sts	0x0096, r24
 b50:	82 e1       	ldi	r24, 0x12	; 18
 b52:	23 c0       	rjmp	.+70     	; 0xb9a <usbPoll+0xf2>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 b54:	83 30       	cpi	r24, 0x03	; 3
 b56:	f1 f4       	brne	.+60     	; 0xb94 <usbPoll+0xec>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 b58:	21 11       	cpse	r18, r1
 b5a:	08 c0       	rjmp	.+16     	; 0xb6c <usbPoll+0xc4>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 b5c:	8a ef       	ldi	r24, 0xFA	; 250
 b5e:	91 e0       	ldi	r25, 0x01	; 1
 b60:	90 93 97 00 	sts	0x0097, r25
 b64:	80 93 96 00 	sts	0x0096, r24
 b68:	84 e0       	ldi	r24, 0x04	; 4
 b6a:	17 c0       	rjmp	.+46     	; 0xb9a <usbPoll+0xf2>
        SWITCH_CASE(1)
 b6c:	21 30       	cpi	r18, 0x01	; 1
 b6e:	41 f4       	brne	.+16     	; 0xb80 <usbPoll+0xd8>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 b70:	82 ee       	ldi	r24, 0xE2	; 226
 b72:	91 e0       	ldi	r25, 0x01	; 1
 b74:	90 93 97 00 	sts	0x0097, r25
 b78:	80 93 96 00 	sts	0x0096, r24
 b7c:	88 e1       	ldi	r24, 0x18	; 24
 b7e:	0d c0       	rjmp	.+26     	; 0xb9a <usbPoll+0xf2>
        SWITCH_CASE(2)
 b80:	22 30       	cpi	r18, 0x02	; 2
 b82:	51 f4       	brne	.+20     	; 0xb98 <usbPoll+0xf0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 b84:	8c ec       	ldi	r24, 0xCC	; 204
 b86:	91 e0       	ldi	r25, 0x01	; 1
 b88:	90 93 97 00 	sts	0x0097, r25
 b8c:	80 93 96 00 	sts	0x0096, r24
 b90:	86 e1       	ldi	r24, 0x16	; 22
 b92:	03 c0       	rjmp	.+6      	; 0xb9a <usbPoll+0xf2>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 b94:	80 e0       	ldi	r24, 0x00	; 0
 b96:	01 c0       	rjmp	.+2      	; 0xb9a <usbPoll+0xf2>
 b98:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 b9a:	90 e4       	ldi	r25, 0x40	; 64
 b9c:	90 93 6b 00 	sts	0x006B, r25
 ba0:	18 c0       	rjmp	.+48     	; 0xbd2 <usbPoll+0x12a>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 ba2:	98 30       	cpi	r25, 0x08	; 8
 ba4:	79 f0       	breq	.+30     	; 0xbc4 <usbPoll+0x11c>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 ba6:	99 30       	cpi	r25, 0x09	; 9
 ba8:	31 f4       	brne	.+12     	; 0xbb6 <usbPoll+0x10e>
        usbConfiguration = value;
 baa:	20 93 9b 00 	sts	0x009B, r18
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 bae:	21 e9       	ldi	r18, 0x91	; 145
 bb0:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 bb2:	80 e0       	ldi	r24, 0x00	; 0
 bb4:	0a c0       	rjmp	.+20     	; 0xbca <usbPoll+0x122>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 bb6:	81 e0       	ldi	r24, 0x01	; 1
 bb8:	9a 30       	cpi	r25, 0x0A	; 10
 bba:	09 f0       	breq	.+2      	; 0xbbe <usbPoll+0x116>
 bbc:	80 e0       	ldi	r24, 0x00	; 0
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 bbe:	21 e9       	ldi	r18, 0x91	; 145
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	03 c0       	rjmp	.+6      	; 0xbca <usbPoll+0x122>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 bc4:	2b e9       	ldi	r18, 0x9B	; 155
 bc6:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
 bc8:	81 e0       	ldi	r24, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 bca:	30 93 97 00 	sts	0x0097, r19
 bce:	20 93 96 00 	sts	0x0096, r18
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 bd2:	9f 81       	ldd	r25, Y+7	; 0x07
 bd4:	91 11       	cpse	r25, r1
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <usbPoll+0x138>
 bd8:	9e 81       	ldd	r25, Y+6	; 0x06
 bda:	98 17       	cp	r25, r24
 bdc:	08 f4       	brcc	.+2      	; 0xbe0 <usbPoll+0x138>
 bde:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 be0:	80 93 60 00 	sts	0x0060, r24
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 be4:	10 92 98 00 	sts	0x0098, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 be8:	80 91 61 00 	lds	r24, 0x0061
 bec:	84 ff       	sbrs	r24, 4
 bee:	4b c0       	rjmp	.+150    	; 0xc86 <usbPoll+0x1de>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 bf0:	80 91 60 00 	lds	r24, 0x0060
 bf4:	8f 3f       	cpi	r24, 0xFF	; 255
 bf6:	09 f4       	brne	.+2      	; 0xbfa <usbPoll+0x152>
 bf8:	46 c0       	rjmp	.+140    	; 0xc86 <usbPoll+0x1de>
 bfa:	c8 2f       	mov	r28, r24
 bfc:	89 30       	cpi	r24, 0x09	; 9
 bfe:	08 f0       	brcs	.+2      	; 0xc02 <usbPoll+0x15a>
 c00:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 c02:	8c 1b       	sub	r24, r28
 c04:	80 93 60 00 	sts	0x0060, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 c08:	e8 e8       	ldi	r30, 0x88	; 136
 c0a:	f0 e0       	ldi	r31, 0x00	; 0
 c0c:	90 81       	ld	r25, Z
 c0e:	88 e8       	ldi	r24, 0x88	; 136
 c10:	89 27       	eor	r24, r25
 c12:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 c14:	cc 23       	and	r28, r28
 c16:	09 f4       	brne	.+2      	; 0xc1a <usbPoll+0x172>
 c18:	44 c0       	rjmp	.+136    	; 0xca2 <usbPoll+0x1fa>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 c1a:	20 91 96 00 	lds	r18, 0x0096
 c1e:	30 91 97 00 	lds	r19, 0x0097
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 c22:	80 91 6b 00 	lds	r24, 0x006B
 c26:	86 ff       	sbrs	r24, 6
 c28:	10 c0       	rjmp	.+32     	; 0xc4a <usbPoll+0x1a2>
 c2a:	a9 e8       	ldi	r26, 0x89	; 137
 c2c:	b0 e0       	ldi	r27, 0x00	; 0
 c2e:	f9 01       	movw	r30, r18
 c30:	8c 2f       	mov	r24, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 c32:	94 91       	lpm	r25, Z
                    *data++ = c;
 c34:	9d 93       	st	X+, r25
                    r++;
 c36:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 c38:	81 50       	subi	r24, 0x01	; 1
 c3a:	d9 f7       	brne	.-10     	; 0xc32 <usbPoll+0x18a>
 c3c:	8f ef       	ldi	r24, 0xFF	; 255
 c3e:	8c 0f       	add	r24, r28
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	01 96       	adiw	r24, 0x01	; 1
 c44:	28 0f       	add	r18, r24
 c46:	39 1f       	adc	r19, r25
 c48:	0e c0       	rjmp	.+28     	; 0xc66 <usbPoll+0x1be>
 c4a:	d9 01       	movw	r26, r18
 c4c:	e9 e8       	ldi	r30, 0x89	; 137
 c4e:	f0 e0       	ldi	r31, 0x00	; 0
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 c50:	8c 2f       	mov	r24, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 c52:	9d 91       	ld	r25, X+
 c54:	91 93       	st	Z+, r25
                    r++;
                }while(--i);
 c56:	81 50       	subi	r24, 0x01	; 1
 c58:	e1 f7       	brne	.-8      	; 0xc52 <usbPoll+0x1aa>
 c5a:	8f ef       	ldi	r24, 0xFF	; 255
 c5c:	8c 0f       	add	r24, r28
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	01 96       	adiw	r24, 0x01	; 1
 c62:	28 0f       	add	r18, r24
 c64:	39 1f       	adc	r19, r25
            }
            usbMsgPtr = r;
 c66:	30 93 97 00 	sts	0x0097, r19
 c6a:	20 93 96 00 	sts	0x0096, r18
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 c6e:	6c 2f       	mov	r22, r28
 c70:	89 e8       	ldi	r24, 0x89	; 137
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	f5 da       	rcall	.-2582   	; 0x260 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 c76:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 c78:	cc 30       	cpi	r28, 0x0C	; 12
 c7a:	18 f4       	brcc	.+6      	; 0xc82 <usbPoll+0x1da>
            usbMsgLen = USB_NO_MSG;
 c7c:	8f ef       	ldi	r24, 0xFF	; 255
 c7e:	80 93 60 00 	sts	0x0060, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 c82:	c0 93 61 00 	sts	0x0061, r28
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 c86:	80 b3       	in	r24, 0x10	; 16
 c88:	8c 70       	andi	r24, 0x0C	; 12
        if(usbLineStatus != 0)  /* SE0 has ended */
 c8a:	89 f4       	brne	.+34     	; 0xcae <usbPoll+0x206>
 c8c:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 c8e:	80 b3       	in	r24, 0x10	; 16
 c90:	8c 70       	andi	r24, 0x0C	; 12
        if(usbLineStatus != 0)  /* SE0 has ended */
 c92:	69 f4       	brne	.+26     	; 0xcae <usbPoll+0x206>
 c94:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 c96:	d9 f7       	brne	.-10     	; 0xc8e <usbPoll+0x1e6>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 c98:	10 92 99 00 	sts	0x0099, r1
    usbDeviceAddr = 0;
 c9c:	10 92 93 00 	sts	0x0093, r1
 ca0:	06 c0       	rjmp	.+12     	; 0xcae <usbPoll+0x206>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 ca2:	6c 2f       	mov	r22, r28
 ca4:	89 e8       	ldi	r24, 0x89	; 137
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	db da       	rcall	.-2634   	; 0x260 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 caa:	cc 5f       	subi	r28, 0xFC	; 252
 cac:	e7 cf       	rjmp	.-50     	; 0xc7c <usbPoll+0x1d4>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 cae:	df 91       	pop	r29
 cb0:	cf 91       	pop	r28
 cb2:	08 95       	ret

00000cb4 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 cb4:	85 b7       	in	r24, 0x35	; 53
 cb6:	82 60       	ori	r24, 0x02	; 2
 cb8:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 cba:	8b b7       	in	r24, 0x3b	; 59
 cbc:	80 64       	ori	r24, 0x40	; 64
 cbe:	8b bf       	out	0x3b, r24	; 59
 cc0:	08 95       	ret

00000cc2 <_exit>:
 cc2:	f8 94       	cli

00000cc4 <__stop_program>:
 cc4:	ff cf       	rjmp	.-2      	; 0xcc4 <__stop_program>
